# Refill provides a high contrast, black & white basemap useful for data visualization.
# Give OpenStreetMap data a professional basemap skin using the Tangram graphics library
# and Mapzen's versatile Vector Tiles.
#
# Refill is a modern GL take on Geraldine's work on Toner for Stamen as part of their
# great CityTracking project. Please use and adapt the open source scene file in
# your own projects!
#
# Authors: Geraldine Sarmiento, Nathaniel V. Kelso
# Read more: https://github.com/tangrams/refill-style
#

global:
    #ux/ui
    ux_language: false             # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_fallback: false    # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }
    ux_language_text_source_short: |
        function() {
            return (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
        }
    ux_language_text_source_short_proxy_name: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var short = (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
            return short ? name : '';
        }
    ux_language_text_source_abbreviation: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var abbrev = (global.ux_language && feature['name:abbreviation:'+global.ux_language]) || (global.ux_language_fallback && feature['name:abbreviation:'+global.ux_language_fallback]) || feature['name:abbreviation'];
            return abbrev || name;
        }
    ux_language_text_source_iata: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.iata) {
                if (name) {
                    return name + ' (' + feature.iata + ')';
                }
                else {
                    return feature.iata;
                }
            } else {
                return name;
            }
        }
    ux_language_text_source_ocean: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split('').join('  ');
        }
    ux_language_text_source_sea: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split('').join(' ');
        }
    ux_language_text_source_continent: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split('').join(' ');
        }
    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_piste_advanced: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆ ' + name) : '◆';
        }
    ux_language_text_source_piste_expert: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆◆ ' + name) : '◆◆';
        }
    ux_language_text_source_building_and_address: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (name && feature.addr_housenumber) {
                return name + '\n' + feature.addr_housenumber;
            } else {
                return name;
            }
        }

    # To facilitate data visualizations several recommended sort orders are provided
    #
    # Your classic raster map overlay.
    # Over all line and polygon features.
    # Under map labels (icons and text), under UI elements
    # (like routeline and search result pins).
    sdk_order_over_everything_but_text_0: 490
    sdk_order_over_everything_but_text_1: 491
    sdk_order_over_everything_but_text_2: 492
    sdk_order_over_everything_but_text_3: 493
    sdk_order_over_everything_but_text_4: 494
    sdk_order_over_everything_but_text_5: 495
    sdk_order_over_everything_but_text_6: 496
    sdk_order_over_everything_but_text_7: 497
    sdk_order_over_everything_but_text_8: 498
    sdk_order_over_everything_but_text_9: 499
    #
    # Your classic "underlay"
    # Under roads. Above borders, water, landuse, and earth.
    sdk_order_under_roads_0: 290
    sdk_order_under_roads_1: 291
    sdk_order_under_roads_2: 292
    sdk_order_under_roads_3: 293
    sdk_order_under_roads_4: 294
    sdk_order_under_roads_5: 295
    sdk_order_under_roads_6: 296
    sdk_order_under_roads_7: 297
    sdk_order_under_roads_8: 298
    sdk_order_under_roads_9: 299
    #
    # Under water.
    # Above earth and most landuse.
    sdk_order_under_water_0: 190
    sdk_order_under_water_1: 191
    sdk_order_under_water_2: 192
    sdk_order_under_water_3: 193
    sdk_order_under_water_4: 194
    sdk_order_under_water_5: 195
    sdk_order_under_water_6: 196
    sdk_order_under_water_7: 197
    sdk_order_under_water_8: 198
    sdk_order_under_water_9: 199
    #
    # Under everything.
    # Tip: disable earth layer.
    sdk_order_under_everything_0: 0
    sdk_order_under_everything_1: 1
    sdk_order_under_everything_2: 2
    sdk_order_under_everything_3: 3
    sdk_order_under_everything_4: 4
    sdk_order_under_everything_5: 5
    sdk_order_under_everything_6: 6
    sdk_order_under_everything_7: 7
    sdk_order_under_everything_8: 8
    sdk_order_under_everything_9: 9
    #
    # SHIELDS
    sdk_shield_color: black
    sdk_shield_text_color: white
    #
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    #
    #label visibility
    # text_visible_continent:         true
    # text_visible_admin:             true
    # text_visible_populated_places:  true
    # icon_visible_populated_places:  true
    # text_visible_neighbourhoods:    true
    # text_visible_neighbourhoods_e:  true
    # text_visible_building:          true
    # text_visible_address:           true
    # text_visible_water_labels:      true
    # text_visible_island:            true
    # label_visible_landuse_green:    true                       #this needs work
    # icon_visible_landuse_green:     true                       #this needs work
    # text_visible_landuse_green:     true
    # label_visible_poi_landuse:      false                      #false on default
    # icon_visible_poi_landuse:       false                      #false on default
    # text_visible_poi_landuse:       true
    # label_visible_poi_landuse_e:    true
    # icon_visible_poi_landuse_e:     false                      #false on default
    # text_visible_poi_landuse_e:     true
    # label_visible_station:          true
    # icon_visible_station:           false                      #false on default, this needs work
    # text_visible_station:           true
    # text_visible_highway:           true
    # text_visible_highway_e:         true
    # text_visible_trunk_primary:     true
    # text_visible_trunk_primary_e2:  false   # the routes       #false on default, still false on more
    # text_visible_trunk_primary_e:   false   # the not-routes   #false on default, still false on more
    # text_visible_secondary:         true
    # text_visible_secondary_e:       false                      #false on default, still false on more
    # text_visible_tertiary:          true
    # text_visible_tertiary_e:        false                      #false on default, still false on more
    # text_visible_minor_road:        true
    # text_visible_minor_road_e:      true
    # text_visible_service_road:      true
    # text_visible_path:              true
    # text_visible_piste:             true
    # text_visible_steps:             true
    # text_visible_aerialway:         true
    # text_visible_shields:           true
    # text_visible_exits:             true
    # text_visible_exits_e:           false                      #false on default, still false on more
    # text_visible_airport_gate:      true

    text_visible_continent:         true
    text_visible_admin:             true
    text_visible_populated_places:  true
    icon_visible_populated_places:  true
    text_visible_neighbourhoods:    true
    text_visible_neighbourhoods_e:  true
    text_visible_building:          true
    text_visible_address:           true
    text_visible_water_labels:      true
    text_visible_island:            true
    label_visible_landuse_green:    true                     #this needs work
    icon_visible_landuse_green:     true                     #this needs work
    text_visible_landuse_green:     true
    label_visible_poi_landuse:      true                     #false on default
    icon_visible_poi_landuse:       true                     #false on default
    text_visible_poi_landuse:       true
    label_visible_poi_landuse_e:    true
    icon_visible_poi_landuse_e:     true                     #false on default
    text_visible_poi_landuse_e:     true
    label_visible_station:          true
    icon_visible_station:           true                     #false on default, this needs work
    text_visible_station:           true
    text_visible_highway:           true
    text_visible_highway_e:         true
    text_visible_trunk_primary:     true
    text_visible_trunk_primary_e2:  true  # the routes       #false on default, still false on more
    text_visible_trunk_primary_e:   true  # the not-routes   #false on default, still false on more
    text_visible_secondary:         true
    text_visible_secondary_e:       true                     #false on default, still false on more
    text_visible_tertiary:          true
    text_visible_tertiary_e:        true                     #false on default, still false on more
    text_visible_minor_road:        true
    text_visible_minor_road_e:      true
    text_visible_service_road:      true
    text_visible_path:              true
    text_visible_piste:             true
    text_visible_steps:             true
    text_visible_aerialway:         true
    text_visible_shields:           true
    text_visible_exits:             true
    text_visible_exits_e:           true                     #false on default, still false on more
    text_visible_airport_gate:      true

    # roads
    highway1:                   [1.00,1.00,1.00]
    highway_link1:              [0.00, 0.00, 0.00]
    highway_casing1:            [0.40, 0.40, 0.40]
    highway_tunnel1:            [0.7, 0.7, 0.7]
    highway_tunnel_casing1:     [1.00, 1.00, 1.00]
    highway_link_tunnel_casing1: [1.00, 1.00, 1.00]
    ferry1:                     [0.75,0.75,0.75]
    rail1:                      '#999'
    rail1_e:                    '#bbb'
    rail2:                      '#777'             # less important rail (service, sidings)
    major_road1:                [0.0, 0.0, 0.0]
    major_road1b:               [0.935, 0.935, 0.935]
    major_road1c:               white    #15%
    major_road2:                [0.935, 0.935, 0.935]
    major_road2a:               [0.935, 0.935, 0.935]
    major_road2b:               [0.935, 0.935, 0.935]
    major_road3:                [0.935, 0.935, 0.935]
    major_road4:                [0.00, 0.00, 0.00]
    major_road5:                white
    major_casing1:              [0.40, 0.40, 0.40]        # same as highway_casing1
    major_casing2:              [0.40, 0.40, 0.40]        # zoomed out
    major_tunnel1:              [0.7, 0.7, 0.7]
    major_tunnel_casing1:       [1.00, 1.00, 1.00]
    major_route1:               [0.0, 0.0, 0.0]
    major_route2:               [0.2, 0.2, 0.2]           # zoomed out
    minor_route:                [0.97, 0.97, 0.97]        # same as major_route
    minor_road1:                [0.935, 0.935, 0.935]     # natural earth
    minor_road2:                [0.935, 0.935, 0.935]     # natural earth, same as major_road2
    minor_road3:                [0.935, 0.935, 0.935]
    minor_road4:                [0.935, 0.935, 0.935]     # zoomed out
    minor_road5:                [0.935, 0.935, 0.935]     # zoomed out, again
    minor_casing1:              white                     # same as highway_casing1
    minor_casing2:              white                     # zoomed out
    minor_tunnel1:              [0.7, 0.7, 0.7]
    minor_tunnel_casing1:       [1.00, 1.00, 1.00]
    service_road1:              [0.935, 0.935, 0.935]
    service_road2:              white
    service_road_casing1:       [0.40, 0.40, 0.40]
    service_road_casing2:       white
    path1:                      [0.97, 0.97, 0.97]
    path2:                      [0.97, 0.97, 0.97]        # zoomed out
    path_casing1:               [0.40, 0.40, 0.40]
    path_bridge_casing1:        [0.40, 0.40, 0.40]
    path_bridge_casing2:        [0.40, 0.40, 0.40]        # zoomed out
    path_steps1:                red
    path_steps1_b:              '#ccc'
    piste_easy:                 [0.367,0.750,0.622]
    piste_intermediate:         [0.420,0.678,0.863]
    piste_advanced:             [0.450,0.450,0.450]
    piste_expert:               [0.450,0.450,0.450]

    # boundaries:
    country_boundary:           '#ccc'
    region_boundary:            '#ccc'
    subregion_boundary:         '#ccc'
    city_wall:                  [0.682,0.682,0.682]
    retaining_wall:             [0.827,0.808,0.780]
    snow_fence:                 [0.827,0.808,0.780]
    fence:                      [0.827,0.808,0.780]

    # areas:
    scene1:      white                    # map background
    water1:      [0.870, 0.870, 0.870]    # water wave
    water2:      [0.760, 0.760, 0.760]    # water wave
    water3:      [0.5, 0.5, 0.5]          # playa texture
    water1_o:    '#fff'                   # water stroke (ocean coastline)
    water2_o:    '#d1d1d1'                # water stroke 2 (streams, lake outlines)
    earth1:      white                    # land color
    earth2:      '#e9e4e0'                # urban
    earth2_v:    false                    # urban
    green1:      [0.50,0.50,0.50]         # park
    green1_r:    '#bbbbbb'                # park roads
    green1_b:    [.65, .65, .65]          # park buildings
    green1_bo:   [.8, .8, .8]             # park building outlines
    green2:      [0.90,0.90,0.90]         # cemetery
    green3:      '#9a9a9a'                # golf course
    green4:      [0.90,0.90,0.90]         # farm faint
    green4_v:    false                    # farm faint
    green5:      [0.75,0.75,0.75]         # farm
    green6:      [0.40,0.40,0.40]         # nature reserve
    green7:      [0.85,0.85,0.85]         # forest
    green8:      [0.80,0.80,0.80]         # conservation
    green9:      [0.85,0.85,0.85]         # forest (landcover)
    green9_e:    [0.90,0.90,0.90]         # forest (landcover) early
    green9_v:    true                     # forest (landcover) visibility
    green10:     [0.85,0.85,0.85]         # sports_centre
    green11:     [0.85,0.85,0.85]         # minor zoo related AOIs
    green11_o:   [0.85,0.85,0.85]         # minor zoo related AOIs outline
    orange1:     '#aaaaaa'                # stadium
    orange2:     [0.40,0.40,0.40]         # pitch (play field)
    brown1:      '#7b7b7b'                # university
    brown1_r:    '#bbbbbb'                # university roads
    brown1_b:    [.65, .65, .65]          # university buildings
    brown1_bo:   [.8, .8, .8]             # university building outlines
    brown2:      '#aaaaaa'                # school
    brown3:      [0.40,0.40,0.40]         # playground
    red1:        '#a2a2a2'                # hospital
    red1_r:      '#bbbbbb'                # hospital roads
    red1_b:      [.65, .65, .65]          # hospital buildings
    red1_bo:     [.8, .8, .8]             # hospital building outlines
    grey1:       '#cccccc'                # pedestrian, retail, airport apron, parking, church
    grey1_e:     '#dad6d4'                # pedestrian, retail, airport apron, parking, church early zoom 14
    grey1_v:     true                     # pedestrian, retail, airport apron, parking, church
    grey2:       [0.5, 0.5, 0.5]          # airport runway
    grey3:       '#bbbbbb'                # railway
    grey4:       '#ffc52a'                # airport taxiway
    grey5:       '#ffc52a'                # airport taxiway
    grey6:       '#dddddd'                # industrial
    grey6_b:     [.65, .65, .65]          # industrial buildings
    grey6_bo:    [.8, .8, .8]             # industrial building outlines
    grey7:       '#ecebe9'                # pedestrian, match minor road / path color
    grey7_v:     true                     # pedestrian visibility
    grey8:       '#ecebe9'                # winter sports
    grey8_v:     true                     # winter sports visibility
    grey9:       [.7, .0, .0, 0.5]        #[.7, .7, .7]        # transit platform
    grey9_o:     [.5, .5, .5]             # transit platform outline
    grey9_v:     true                     # transit platform visibility
    grey10:      '#d4cce6'                # generic major landuse (theme park, resort, aquarium, winery)
    grey10_o:    '#bcb9c5'                # generic major landuse outline
    grey11:      '#d7d7d7'                # generic minor landuse (attraction, artwork)
    grey11_o:    '#cccccc'                # generic minor landuse outline
    grey12:      '#cfcfcf'                # generic minor amusements (roller coasters, rides, slide, carousel)
    grey12_o:    '#c5c5c5'                # generic minor amusements
    purple:      '#f0e1e1'                # airport
    purple_v:    false                    # airport
    mystry1:     '#aaaaaa'                # recreation ground (type of park, sometimes around reservoirs)
    building1:   white                    # building
    building2:   white                    # building stroke
    building_o:  25                       # building stroke order
    building_e:  true                     # building stroke order

    # labels:
    text_fill:             '#000'                 # WHITE
    text_fill2:            '#000'                 # WHITE
    text_fill_road_e:      '#555'                 # WHITE
    text_fill_exits:       [0.40,0.40,0.40]       # motorway junctions, highway_casing1
    text_fill_building:    '#000'                 # tan
    text_fill_address:     [0.60,0.60,0.60]       # HUH
    text_fill_water:       '#000'                 # blue
    text_fill_park:        [0.175,0.175,0.175]    # green
    text_fill_beach:       [0.35,0.35,0.35]       # black
    text_fill_piste:       [0.675,0.675,0.675]    # dark gray
    text_fill_piste_e:     [0.675,0.675,0.675]    # dark gray early
    text_stroke:           '#fff'                 # land color
    text_stroke_park:      '#fff'                 # land color
    text_stroke_water:     '#fff'
    text_stroke_address:   [1.0,1.0,1.0]          # address stroke color
    townspot_sprite:       townspot-m-rev         # depends on land color and text settings
    text_font_family:      'Open Sans'            # branding in asperational Unicode, yo (or Helvetica)


textures:
    pois:
        url: images/refill@2x.png
        filtering: mipmap
        sprites:
            # define sprites: [x origin, y origin, width, height]
            'US:CA-1char': [488, 642, 82, 92]
            'US:CA-2char': [388, 642, 94, 94]
            'US:CA-3char': [268, 642, 114, 92]
            'US:CA-4char': [136, 642, 124, 92]
            'US:CA-5char': [0, 642, 128, 92]
            'US:I-1char': [908, 746, 90, 100]
            'US:I-2char': [798, 746, 102, 100]
            'US:I-3char': [658, 746, 132, 100]
            'US:I-4char': [512, 746, 140, 100]
            'US:I-5char': [352, 746, 152, 100]
            'US:NY-1char': [756, 386, 72, 88]
            'US:NY-2char': [660, 386, 88, 88]
            'US:NY-3char': [548, 386, 104, 86]
            'US:NY-4char': [424, 388, 116, 84]
            'US:NY-5char': [296, 386, 120, 86]
            'US:PA-1char': [216, 386, 72, 88]
            'US:PA-2char': [120, 386, 88, 88]
            'US:PA-3char': [0, 386, 112, 88]
            'US:PA-4char': [844, 254, 120, 88]
            'US:PA-5char': [708, 254, 128, 88]
            'US:US-1char': [256, 746, 88, 94]
            'US:US-2char': [144, 746, 106, 94]
            'US:US-3char': [0, 746, 138, 100]
            'US:US-4char': [748, 642, 156, 100]
            'US:US-5char': [576, 642, 164, 100]
            airport: [870, 0, 38, 38]
            aerodrome: [870, 0, 38, 38]
            aquarium: [732, 168, 38, 38]
            atm: [918, 126, 38, 38]
            bakery: [548, 168, 38, 38]
            bank: [964, 126, 38, 38]
            category-predicate-money: [964, 126, 38, 38]
            bar: [230, 168, 38, 38]
            pub: [230, 168, 38, 38]
            category-predicate-drink: [230, 168, 38, 38]
            baseball: [460, 84, 38, 38]
            basketball: [414, 84, 38, 38]
            beach: [598, 84, 38, 38]
            bench: [548, 0, 38, 38]
            bicycle: [872, 126, 38, 38]
            bicycle_rental: [872, 126, 38, 38]
            bicycle_rental_station: [872, 126, 38, 38]
            bicycle_parking: [644, 126, 38, 38]
            biergarten: [276, 210, 38, 38]
            brewery: [276, 210, 38, 38]
            books: [826, 126, 38, 38]
            bridge: [874, 84, 38, 38]
            buddhist: [736, 84, 38, 38]
            building: [414, 168, 38, 38]
            hangar: [414, 168, 38, 38]
            nursing_home: [414, 168, 38, 38]
            manor: [414, 168, 38, 38]
            apartments: [414, 168, 38, 38]
            care_home: [414, 168, 38, 38]
            bus_station: [778, 0, 38, 38]
            bus_stop: [778, 0, 38, 38]
            butcher: [920, 42, 38, 38]
            cafe: [502, 168, 38, 38]
            camp_site: [782, 84, 38, 38]
            summer_camp: [782, 84, 38, 38]
            capital-l: [544, 210, 32, 32]
            capital-m: [512, 210, 24, 24]
            capital-s: [482, 210, 20, 20]
            capital-xl: [632, 210, 40, 40]
            capital-xs: [460, 210, 16, 16]
            car: [780, 126, 38, 38]
            category-namespace-mobility: [780, 126, 38, 38]
            category-predicate-mobility: [780, 126, 38, 38]
            car_repair: [0, 168, 38, 38]
            car_sharing: [594, 0, 38, 38]
            castle: [414, 42, 38, 38]
            fort: [414, 42, 38, 38]
            cemetery: [690, 84, 38, 38]
            grave_yard: [690, 84, 38, 38]
            christian: [184, 126, 38, 38]
            cinema: [778, 168, 38, 38]
            clothes: [824, 168, 38, 38]
            fashion: [824, 168, 38, 38]
            college: [870, 168, 38, 38]
            university: [870, 168, 38, 38]
            confectionery: [0, 210, 38, 38]
            convenience: [46, 84, 38, 38]
            county_shield-1char: [404, 478, 72, 72]
            county_shield-2char: [300, 478, 96, 72]
            county_shield-3char: [160, 478, 132, 72]
            county_shield-4char: [0, 478, 152, 72]
            county_shield-5char: [836, 386, 180, 72]
            courthouse: [364, 0, 38, 38]
            department_store: [734, 126, 38, 38]
            drinking_water: [230, 210, 38, 38]
            dry_cleaning: [0, 84, 38, 38]
            electronics: [598, 126, 38, 38]
            computer: [598, 126, 38, 38]
            estate_agent: [138, 42, 38, 38]
            factory: [368, 168, 38, 38]
            industrial: [368, 168, 38, 38]
            chimney: [368, 168, 38, 38]
            substation: [368, 168, 38, 38]
            wastewater_plant: [368, 168, 38, 38]
            works: [368, 168, 38, 38]
            water_works: [368, 168, 38, 38]
            plant: [368, 168, 38, 38]
            generator: [368, 168, 38, 38]
            category-predicate-industry: [368, 168, 38, 38]
            fast_food: [138, 210, 38, 38]
            ferry: [824, 0, 38, 38]
            ferry_terminal: [824, 0, 38, 38]
            fire_station: [318, 0, 38, 38]
            fitness: [874, 42, 38, 38]
            fitness_station: [874, 42, 38, 38]
            florist: [138, 126, 38, 38]
            forest: [46, 210, 38, 38]
            natural_forest: [46, 210, 38, 38]
            nature_reserve: [46, 210, 38, 38]
            fountain: [276, 126, 38, 38]
            fuel: [960, 168, 38, 38]
            gallery: [640, 168, 38, 38]
            garden: [644, 84, 38, 38]
            generic: [368, 210, 38, 38]
            category-namespace-other: [368, 210, 38, 38]
            category-predicate-addressing: [368, 210, 38, 38]
            generic_shield-1char: [104, 554, 72, 72]
            generic_shield-2char: [0, 554, 98, 72]
            generic_shield-3char: [832, 478, 132, 72]
            generic_shield-4char: [672, 478, 152, 72]
            generic_shield-5char: [484, 478, 180, 72]
            gift: [92, 126, 38, 38]
            golf_course: [368, 84, 38, 38]
            government: [138, 168, 38, 38]
            townhall: [138, 168, 38, 38]
            public: [138, 168, 38, 38]
            embassy: [138, 168, 38, 38]
            category-predicate-civic: [138, 168, 38, 38]
            hairdresser: [46, 42, 38, 38]
            hardware: [828, 42, 38, 38]
            doityourself: [828, 42, 38, 38]
            painter: [828, 42, 38, 38]
            historical: [46, 126, 38, 38]
            hospital: [184, 0, 38, 38]
            category-namespace-health: [184, 0, 38, 38]
            category-predicate-health: [184, 0, 38, 38]
            hotel: [732, 0, 38, 38]
            motel: [732, 0, 38, 38]
            hostel: [732, 0, 38, 38]
            category-predicate-sleep: [732, 0, 38, 38]
            ice_cream: [322, 210, 38, 38]
            information: [414, 210, 38, 38]
            jewelry: [736, 42, 38, 38]
            jewish: [46, 0, 38, 38]
            landmark: [272, 0, 38, 38]
            memorial: [272, 0, 38, 38]
            monument: [272, 0, 38, 38]
            tower: [272, 0, 38, 38]
            beacon: [272, 0, 38, 38]
            laundry: [690, 42, 38, 38]
            library: [0, 0, 38, 38]
            light_rail: [686, 0, 38, 38]
            tram_stop: [686, 0, 38, 38]
            lighthouse: [230, 84, 38, 38]
            liquor: [506, 126, 38, 38]
            alcohol: [506, 126, 38, 38]
            mall: [644, 42, 38, 38]
            marina: [92, 168, 38, 38]
            dock: [92, 168, 38, 38]
            mineshaft: [782, 42, 38, 38]
            quarry: [782, 42, 38, 38]
            adit: [782, 42, 38, 38]
            mobile_phone: [506, 42, 38, 38]
            museum: [0, 126, 38, 38]
            observatory: [0, 126, 38, 38]
            music: [368, 42, 38, 38]
            muslim: [92, 0, 38, 38]
            newspaper: [322, 42, 38, 38]
            kiosk: [322, 42, 38, 38]
            office: [552, 84, 38, 38]
            insurance: [552, 84, 38, 38]
            company: [552, 84, 38, 38]
            category-predicate-service: [552, 84, 38, 38]
            optician: [276, 42, 38, 38]
            park: [230, 126, 38, 38]
            category-predicate-nature: [230, 126, 38, 38]
            parking: [690, 126, 38, 38]
            peak: [184, 84, 38, 38]
            pet: [230, 42, 38, 38]
            pharmacy: [966, 42, 38, 38]
            photographic_laboratory: [184, 42, 38, 38]
            photographer: [184, 42, 38, 38]
            pier: [640, 0, 38, 38]
            place_of_worship: [276, 168, 38, 38]
            chapel: [276, 168, 38, 38]
            wayside_shrine: [276, 168, 38, 38]
            category-predicate-religion: [276, 168, 38, 38]
            playground: [460, 42, 38, 38]
            police: [226, 0, 38, 38]
            post_office: [322, 168, 38, 38]
            recycling: [92, 42, 38, 38]
            restaurant: [92, 210, 38, 38]
            category-namespace-eat_and_drink: [92, 210, 38, 38]
            category-predicate-eat: [92, 210, 38, 38]
            retail: [598, 42, 38, 38]
            store: [598, 42, 38, 38]
            category-namespace-shop_and_service: [598, 42, 38, 38]
            category-predicate-shop: [598, 42, 38, 38]
            ruin: [502, 0, 38, 38]
            ruins: [502, 0, 38, 38]
            archaeological_site: [502, 0, 38, 38]
            school: [506, 84, 38, 38]
            kindergarten: [506, 84, 38, 38]
            category-namespace-education_and_religion: [506, 84, 38, 38]
            category-predicate-education: [506, 84, 38, 38]
            sdk_shield-1char: [832, 554, 84, 84]
            sdk_shield-2char: [712, 554, 112, 84]
            sdk_shield-3char: [560, 554, 144, 84]
            sdk_shield-4char: [384, 554, 168, 84]
            sdk_shield-5char: [184, 554, 192, 84]
            shoemaker: [552, 42, 38, 38]
            ski: [322, 126, 38, 38]
            ski_rental: [322, 126, 38, 38]
            ski_school: [322, 126, 38, 38]
            winter_sports: [322, 126, 38, 38]
            slipway: [138, 84, 38, 38]
            soccer: [322, 84, 38, 38]
            sports: [0, 42, 38, 38]
            sports_centre: [184, 168, 38, 38]
            pitch: [184, 168, 38, 38]
            recreation_ground: [184, 168, 38, 38]
            spring: [276, 84, 38, 38]
            hot_spring: [276, 84, 38, 38]
            stadium: [414, 126, 38, 38]
            subway_entrance: [456, 0, 38, 38]
            supermarket: [552, 126, 38, 38]
            greengrocer: [552, 126, 38, 38]
            swimming_pool: [460, 126, 38, 38]
            swimming_area: [460, 126, 38, 38]
            tailor: [962, 0, 38, 38]
            tennis: [368, 126, 38, 38]
            theatre: [594, 168, 38, 38]
            category-predicate-fun: [594, 168, 38, 38]
            theme_park: [966, 84, 38, 38]
            amusement_ride: [966, 84, 38, 38]
            toilets: [828, 84, 38, 38]
            townspot-l: [932, 210, 32, 32]
            townspot-l-rev: [760, 210, 32, 32]
            townspot-m: [900, 210, 24, 24]
            townspot-m-rev: [728, 210, 24, 24]
            townspot-s: [872, 210, 20, 20]
            townspot-s-rev: [700, 210, 20, 20]
            townspot-xl: [972, 210, 40, 40]
            townspot-xl-rev: [800, 210, 40, 40]
            townspot-xs: [848, 210, 16, 16]
            townspot-xs-rev: [680, 210, 12, 12]
            toys: [916, 0, 38, 38]
            traffic_signals: [916, 168, 38, 38]
            train_station: [410, 0, 38, 38]
            station: [410, 0, 38, 38]
            train: [410, 0, 38, 38]
            category-predicate-transport: [410, 0, 38, 38]
            ux-current-location: [294, 254, 88, 88]
            ux-locate-off: [628, 254, 72, 72]
            ux-locate-on: [548, 254, 72, 72]
            ux-route-arrow: [0, 254, 128, 128]
            ux-route-start: [214, 254, 72, 92]
            ux-route-stop: [136, 254, 72, 92]
            ux-search-active: [388, 254, 72, 108]
            ux-search-inactive: [468, 254, 72, 108]
            ux-transit-stop: [584, 212, 42, 36]
            veterinary: [138, 0, 38, 38]
            viewpoint: [686, 168, 38, 38]
            category-namespace-do_and_see: [686, 168, 38, 38]
            category-predicate-attraction: [686, 168, 38, 38]
            vineyard: [46, 168, 38, 38]
            volcano: [92, 84, 38, 38]
            wine: [184, 210, 38, 38]
            winery: [456, 168, 38, 38]
            zoo: [920, 84, 38, 38]

    building-grid:
        url: images/building-grid.gif
        filtering: mipmap

sources:
    mapzen:
        type: TopoJSON #GeoJSON, MVT, TopoJSON
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-W2tPU-Y
        #url:  https://tile.dev.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        # url:  //localhost:8080/vector/all/{z}/{x}/{y}.topojson
        max_zoom: 16

#    # Only enable this for local debug, should not be enabled for prod (app inserts these at runtime)
#    # These are all in San Francisco, California
#    #
#    # Current location gem
#    mz_current_location:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/9e9588228b0a604264a2/raw/b28be49bea0b7feb859eb65b588c28e9fee5ae2c/map.geojson
#    # Route line
#    mz_route_line:
#        type: GeoJSON
#        # sf to ny
#        #url: https://gist.githubusercontent.com/anonymous/30c6c1a75c168d91d90c/raw/92bfe55e622766d250b1f2f5d17bdc7c26acb956/map.geojson
#        # local sf trip
#        url: https://gist.githubusercontent.com/anonymous/9a610ebda6fe4be7bccc/raw/8d217e43f2412d48d01534ba115f1e42dac72e68/map.geojson
#    # Transit route line
#    mz_route_line_transit:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/71ae88cbc6d62c4d141ecd6a61060050/raw/2254bbc18243f5dc609e663a580c9412a7447936/map.geojson
#    # Pin at start of route
#    mz_route_start:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/5262969cb7549ea69221/raw/be03f233fa323d9b5cf50ef1d8e89a1faa3750f1/map.geojson
#    # Pin at end of route
#    mz_route_destination:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/dbae9635dfe46796490e/raw/df55c318635a7d91b309ed40754d4738a292fd38/map.geojson
#    # Arrow for current route location
#    mz_route_location:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/36613092be6e2aa004fd/raw/f753d13069425199e1dea1b449ef67d723f6510e/map.geojson
#    # Dots for transit stops in route preview
#    mz_route_transit_stop:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/b9f16bca4a804f50faf71277d52ee4ab/raw/db13e4e765fa1ac8844b8ba02f4a0f66fe772907/map.geojson
#    # Pins showing search result locations
#    mz_search_result:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/57dc09eeb120919f76de/raw/43426217da3c2bae0522dc4257aaa61e4df3981e/map.geojson
#    # Default point styling (SDK)
#    mz_default_point:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/16324c771edfce45be0721390389b878/raw/7dbaebf17da7da8562e6c6f8768bc8cff83efa88/map.geojson
#    # Default shield styling (SDK)
#    mz_default_shield:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/5a789f6bd8b51b5693ba9cd57a767aa1/raw/d4523a6c9deebca125298c31085958262caa1ecd/map.geojson
#    # Default line styling (SDK)
#    mz_default_line:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/26f4e8b6b34b2617b5d5533d89decb39/raw/df8e180ab4f7f19448014dccc4a755f7cfa20003/map.geojson
#    # Default polygon styling (SDK)
#    mz_default_polygon:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/88235c795bb44b8c45150bdd5561f947/raw/71d4fab97b6513833bf1a589167119e6169ef86d/map.geojson

cameras:
    isometric:
        type: isometric

styles:
    dashed:
        base: lines
        dash: [1.25, 1.25]

##### LIBRARY OF FUNCTIONS
#    SPACE functions
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    space-constant:
        shaders:
            blocks:
                global: |
                    // Get the constant coordinates (glitches on zooms)
                    // ================================
                    vec2 getConstantCoords () {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = gl_FragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                        #else
                        return vec2(0.0,0.0);
                        #endif
                    }
#    TILING functions
    tiling-tile:
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent tiles
                    // ================================
                    vec2 tile(vec2 st, float zoom){
                        st *= zoom;
                        return fract(st);
                    }
    tiling-brick:
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent brick-like tiles
                    // ================================
                    vec2 brick(vec2 st, float zoom){
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y, 2.0)) * 0.5;
                        return fract(st);
                    }
    tiling-mirror:
        shaders:
            blocks:
                global: |
                    // Mirror the coordinate space
                    // ================================
                    vec2 mirror(vec2 _st, vec2 _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x = _st.x + 0.5;
                            _st.y = 1.0 - _st.y;
                        }
                        return fract(_st);
                    }
#    Usefull functions
    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }
#    Generative functions
    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random(float x) { return fract(sin(x)*43758.5453);}
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float random(vec3 p) { return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123); }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) { return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453); }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) { return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453); }
                    vec3 random3 (vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
#    Drawing Shapes functions
    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }

                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }

                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }

                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }

                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
#    Patterns compositions functions
    patterns-stripes:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // Return a distance function of stripes
                    float stripesDF (vec2 st) {
                        return abs(sin(st.y*PI));
                    }

                    // Adjustable width stripes
                    float stripes (vec2 st, float width) {
                        return aastep(width,stripesDF(st));
                    }

                    // Faster optimisation of diagonal stripes
                    float diagonalStripes (vec2 st) {
                        vec2 i_st = floor(st);
                        vec2 f_st = fract(st);
                        if (mod(i_st.y,2.) - mod(i_st.x,2.) == 0.) {
                            return 1.0 - aastep(f_st.x,f_st.y);
                        } else {
                            return aastep(f_st.x,f_st.y);
                        }
                    }
    patterns-dots:
        mix: [space-tile, tiling-brick, shapes-circle]
        shaders:
            blocks:
                global: |
                    // Interpolated dot patern between zooms attached to tile coords
                    float TileDots(float scale, float size) {
                        // Beginning of the transition
                        vec2 IN = brick(getTileCoords()*scale,2.);
                        float A = circleDF(vec2(0.5)-IN)*1.8;
                        //
                        // If over 18. add an end B to transition with
                        float d = 0.0;
                        if (u_map_position.z < 18.) {
                            vec2 OUT = fract(getTileCoords()*scale*2.);
                            float B = circleDF(vec2(0.25)-OUT)*5.;
                            B = min(B, circleDF(vec2(0.75,0.25)-OUT)*5.);
                            B = min(B, circleDF(vec2(0.5,0.75)-OUT)*5.);
                            B = min(B, circleDF(vec2(0.,0.75)-OUT)*5.);
                            B = min(B, circleDF(vec2(1.,0.75)-OUT)*5.);
                            d = mix(A, B, pow(fract(u_map_position.z),10.));
                        } else {
                            d = A;
                        }
                        //
                        // Use the antialias step to make a shape from the DF
                        return aastep(size,d);;
                    }
##### ACTUAL STYLES
    dashedline:
        base: lines
        mix: tiling-mirror
        lighting: false # ignore lights
        texcoords: true
        shaders:
            blocks:
                global: |
                    float stripes(vec2 st){
                        st = st * 10.;
                        return step(.5, 1.0 - smoothstep(.3, 1., abs(sin(st.y * 3.14159))));
                    }
                color: |
                    vec2 st = v_texcoord;
                    vec4 foreground = vec4(0.850,0.850,0.850,1.0);
                    color = mix(v_color, foreground, stripes(st));
    water-gradient:
        base: polygons
        shaders:
            blocks:
                filter: |
                    color.rgb = mix(vec3(1.0), vec3(0.970), gl_FragCoord.x / u_resolution.x + gl_FragCoord.y / u_resolution.y);

    pixel-pattern-light:
        mix: [space-tile, generative-random]
        base: polygons
        shaders:
            blocks:
                filter: |
                    vec3 pos = vec3(getTileCoords()*130.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.785);

    pixel-pattern-bright:
        mix: [space-tile, generative-random]
        base: polygons
        shaders:
            blocks:
                filter: |
                    vec3 pos = vec3(getTileCoords()*180.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.855);

    pixel-pattern-dark:
        mix: [space-tile, generative-random]
        base: polygons
        shaders:
            blocks:
                filter: |
                    vec3 pos = vec3(getTileCoords()*280.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.695);

    waves:
        base: polygons
        mix: [space-constant, patterns-stripes]
        shaders:
            defines:
                COLOR1: vec3(0.915)
                COLOR2: vec3(0.950)
            blocks:
                global: |
                    float stripes2(vec2 st){
                        return step(.3,1.0-smoothstep(.5,1.,abs(sin(st.y*3.14159265358))));
                    }
                filter: |
                    vec2 st = getConstantCoords();

                    const float wave_width = 30.0;
                    const float wave_height = .01;
                    st.y += sin(st.x*wave_width)*wave_height;

                    // gradient
                    color.rgb = mix(COLOR1, color.rgb, gl_FragCoord.x / u_resolution.x);
                    color = mix(color,vec4(COLOR2,1.0),stripes(st*92.,.5))*1.0;

    waves2:
        base: polygons
        mix: waves
        shaders:
            defines:
                COLOR1: vec3(0.840)
                COLOR2: vec3(0.910)


    stream-waves:
        base: lines
        mix: waves
        shaders:
            defines:
                COLOR1: vec3(0.910)
                COLOR2: vec3(0.980)

    coast:
        base: lines
        mix: [space-constant]
        blend: overlay
        shaders:
            blocks:
                global: |
                    mat2 rotate2d(float angle){
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }

                    float stripes(vec2 st){
                        st = rotate2d(3.14159265358*-0.25 )*st;
                        //return step(.9,1.0-smoothstep(.5,1.,abs(sin(st.x*3.14159265358))));
                        return step(.75,1.0-smoothstep(.75,1.,abs(sin(st.x*3.14159265358)))); // more spaced out stripes?
                    }
                color: |
                    vec2 st = getConstantCoords();
                    color = mix(vec4(color.rgb, 0.4), vec4(0.0), stripes(st*130.))*.8; // transparent stripes

    dots:
        mix: [space-tile, tiling-tile, shapes-circle]
        base: polygons
        shaders:
            defines:
                PATTERN_SCALE: 50.0
                DOT_SIZE: .1
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb
            blocks:
                color: |
                    color.rgb = mix(COLOR1, COLOR2, circle(tile(getTileCoords(),PATTERN_SCALE), DOT_SIZE));

    dots-medium:
        mix: dots
        base: polygons
        shaders:
            defines:
                PATTERN_SCALE: 60.0
                DOT_SIZE: .25
    dots3:
        mix: dots
        base: polygons
        shaders:
            defines:
                PATTERN_SCALE: 70.0
                DOT_SIZE: .125

    park-dots1:
        mix: dots
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb

    medium-dots:
        mix: dots-medium
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb

    tiny-dots:
        mix: dots3
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb

    park-dots3:
        mix: dots
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: vec3(0.760,0.760,0.760)

    dots-rev:
        base: polygons
        mix: patterns-dots
        shaders:
            blocks:
                color: |
                    color.rgb = mix(vec3(1.000), color.rgb, TileDots(35.0, 0.31));

    horizontal-bars:
        base: polygons
        mix: [space-constant, shapes-rect]
        texcoords: false
        shaders:
            blocks:
                global: |
                    float bar(in vec2 st, float size){
                        return  rect(st, vec2(size*0.90,size*0.2));
                    }
                filter: |
                    vec2 pos = getConstantCoords()*50.0;
                    float pct = clamp(bar(fract(pos),0.5),0.0,1.0);
                    color.rgb = mix(vec3(1.0,1.0,1.0),color.rgb,pct);

    horizontal-bars-rev:
        base: polygons
        mix: [space-constant, shapes-rect]
        texcoords: false
        shaders:
            blocks:
                global: |
                    float bar(in vec2 st, float size){
                        return rect(st, vec2(size*1.05,size*0.5));
                    }
                filter: |
                    vec2 pos = getConstantCoords()*50.0;
                    float pct = clamp(bar(fract(pos),0.5),0.0,1.0);
                    color.rgb = mix(color.rgb,vec3(1.0,1.0,1.0),pct);

    # HSV/RGB functions
    hsv:
        shaders:
            blocks:
                global: |
                    vec3 rgb2hsv(vec3 c)
                    {
                        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
                        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
                        float d = q.x - min(q.w, q.y);
                        float e = 1.0e-10;
                        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
                    }
                    vec3 hsv2rgb(vec3 c)
                    {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }

    scale-buildings:
        shaders:
            blocks:
                position: |
                    // scale buildings based on zoom
                    float zoom = u_map_position.z;
                    float min = .1;       // minimum building scale
                    float midpoint = 16.; // middle of zoom range
                    float inspeed = .1;   // number of zooms to scale buildings up
                    float outspeed = 2.;  // number of zooms to scale buildings back down
                    float e = 0.;

                    if (zoom >= midpoint) {
                        e = (zoom - midpoint) / (outspeed * .2);
                    } else {
                        e = abs(zoom - midpoint) / inspeed;
                    }
                    position.z *= ((1. - min) / (1. + (exp(e)))) + min;

    building-grid:
        base: polygons
        lighting: false
        mix: [hsv, scale-buildings]
        texcoords: true
        shaders:
            uniforms:
                u_tex_grid: building-grid
            defines:
                WALL_TINT: vec3(1., 3., .993)
            blocks:
                color: |
                    if (dot(vec3(0., 0., 1.), worldNormal()) < .5) {
                        // If it's a wall
                        color.rgb = hsv2rgb(rgb2hsv(color.rgb) * WALL_TINT);
                        color.rgb = mix(color.rgb, vec3(0.),
                                        texture2D(u_tex_grid, v_texcoord).a);
                    }
    sand:
        base: polygons
        mix: [generative-random, space-tile]
        animated: false
        shaders:
            blocks:
                color: |
                    // vec2 st = getTileCoords()*2.;
                    vec2 st = floor(getTileCoords()*250.);
                    color.rgb = mix(vec3(0.75), vec3(1.0), smoothstep(0.048,0.120, random(st)));
    building-lines:
        base: lines
        mix: scale-buildings
        texcoords: true
    lines_transparent:
        base: lines
        blend: overlay
    outline_transparent:
        base: lines
        blend: overlay
    polygons_transparent:
        base: polygons
        blend: overlay
    icons:
        base: points
        texture: pois
        blend_order: 1
    text-blend-order:
        base: text
        blend_order: 1
    ux-lines-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-transit-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-location-gem-overlay:
        base: points
        texture: pois
        interactive: true
        blend: overlay
        blend_order: 2
    ux-icons-overlay:
        base: points
        texture: pois
        interactive: true
        blend: overlay
        blend_order: 3
    sdk-point-overlay:
        base: points
        texture: pois
        interactive: true
        blend: overlay
        blend_order: 3
    sdk-shield-overlay:
        base: points
        texture: pois
        interactive: true
        blend: overlay
        blend_order: 3
    sdk-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    sdk-polygon-overlay:
        base: polygons
        blend: overlay
        blend_order: 0

scene:
    background:
        color: global.scene1

fonts:
    Montserrat:
        url: https://fonts.gstatic.com/s/montserrat/v7/zhcz-_WihjSQC0oHJ9TCYL3hpw3pgy2gAi-Ip7WPMi0.woff

layers:
    # Map overlays for styling the server response (using special source layer names) for route line, current location, and search result pins
    mz_route_line:
        data: { source: mz_route_line }
        draw:
            ux-lines-overlay:
                color: '#06a6d4'
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_route_line_transit:
        data: { source: mz_route_line_transit }
        draw:
            ux-transit-line-overlay:
                # each transit route segment could be a different "line" each with it's own color
                # but some transit lines don't define a color, in those cases default to blue
                # and since the color is coming from Transit.land they call it "color" instead of "colour"
                color: function() { return feature.color || '#06a6d4'; }
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]


    mz_current_location_gem:
        data: { source: mz_current_location }
        draw:
            ux-location-gem-overlay:
                interactive: true
                sprite: ux-current-location
                size: 36px
                collide: false
                transition:
                    [show, hide]:
                        time: 0s
    mz_route_location:
        data: { source: mz_route_location }
        draw:
            ux-location-gem-overlay:
                interactive: true
                sprite: ux-route-arrow
                size: [60px,60px]
                collide: false
                transition:
                    [show, hide]:
                        time: 0s
    mz_route_start:
        data: { source: mz_route_start }
        draw:
            ux-icons-overlay:
                interactive: true
                priority: 1
                sprite: ux-route-start
                size: [36px,46px]
                collide: false
                anchor: top
                transition:
                    [show, hide]:
                        time: 0s
    mz_route_destination:
        data: { source: mz_route_destination }
        draw:
            ux-icons-overlay:
                interactive: true
                priority: 1
                sprite: ux-route-stop
                size: [36px,46px]
                collide: false
                anchor: top
                transition:
                    [show, hide]:
                        time: 0s
    mz_route_transit_stop:
        data: { source: mz_route_transit_stop }
        draw:
            ux-icons-overlay:
                interactive: true
                sprite: ux-transit-stop
                size: [15px,15px]
                collide: false
                transition:
                    [show, hide]:
                         time: 0s
    mz_search_result:
        data: { source: mz_search_result }
        draw:
            ux-icons-overlay:
                interactive: true
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition:
                    [show, hide]:
                        time: 0s
        inactive:
            filter: { state: inactive }
            draw:
                ux-icons-overlay:
                    sprite: ux-search-inactive
    mz_dropped_pin:
        data: { source: mz_dropped_pin }
        draw:
            ux-icons-overlay:
                interactive: true
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition:
                    [show, hide]:
                        time: 0s

    # Used by the SDK to place point, line, and polygon overlays on the map
    mz_default_point:
        data: { source: mz_default_point }
        draw:
            sdk-point-overlay:
                interactive: true
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition:
                    [show, hide]:
                        time: 0s
    mz_default_shield:
        data: { source: mz_default_shield }
        draw:
            sdk-shield-overlay:
                interactive: true
                sprite: |
                    function() {
                        if( feature.ref ) {
                            return ('sdk_shield-' + feature.ref.length + 'char');
                        } else {
                            return ('sdk_shield-' + feature.name.length + 'char');
                        }
                    }
                sprite_default: sdk_shield-1char
                color: global.sdk_shield_color
                collide: false
                transition:
                    [show, hide]:
                        time: 0s
                text:
                    # offset: [0px, -1px]
                    text_source: |
                        function() {
                            if( feature.ref ) {
                                return feature.ref;
                            } else {
                                return feature.name;
                            }
                        }
                    anchor: center
                    font:
                        family: Montserrat
                        fill: global.sdk_shield_text_color
                        style: bold
                        size: [[7,7px],[12,8px],[16,11px]]

        width_1char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 1);
                    } else {
                        return (feature.name.length === 1);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
        width_2char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 2);
                    } else {
                        return (feature.name.length === 2);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
        width_3char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 3);
                    } else {
                        return (feature.name.length === 3);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
        width_4char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 4);
                    } else {
                        return (feature.name.length === 4);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
        width_5char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 5);
                    } else {
                        return (feature.name.length === 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
        # this is kinda a hack
        width_longggggg:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length > 5);
                    } else {
                        return (feature.name.length > 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    visible: false
    mz_default_line:
        data: { source: mz_default_line }
        draw:
            sdk-line-overlay:
                color: '#06a6d4'
                order: 503
                width: 3px
    mz_default_polygon:
        data: { source: mz_default_polygon }
        draw:
            sdk-polygon-overlay:
                color: [0.02,0.65,0.82,0.5]  #'#06b1e2'
                order: 501
            sdk-line-overlay:
                color: '#06a6d4'
                order: 502
                width: 0px


    # Basemap styling
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                order: global.feature_order
                color: [1.0,1.0,1.0]

        continent:
            filter: { name: true, kind: [continent], $zoom: {max: 5} }
            draw:
                text-blend-order:
                    visible: global.text_visible_continent
                    text_source: ux_language_text_source
                    font:
                        size: 14px
                        style: italic
                        fill: global.text_fill
                        weight: 600
                        # stroke: { color: global.text_stroke, width: 4 }
                        transform: uppercase
        continent-spacer:
            filter: { kind: continent }
            continent-spacer-z1-z5:
                filter: { $zoom: { min: 1, max: 5 } }
                draw:
                    text-blend-order:
                        text_source: ux_language_text_source_continent
                        text_wrap: false

        island:
            filter: { kind: [archipelago, island, islet] }
            draw:
                text-blend-order:
                    visible: global.text_visible_island
                    text_wrap: 10
                    font:
                        size: 12px
                        style: italic
                        fill: global.text_fill
                        weight: 400
                        stroke: { color: global.text_stroke, width: 4 }
                        #transform: uppercase
    water:
        data: { source: mapzen, layer: water }
        draw:
            waves:
                #interactive: true
                order: global.feature_order
                color: [0.880, 0.880, 0.880]
        later:
            filter: { $zoom: { min: 12 } }
            draw:
                waves2:
                    color: [0.780, 0.780, 0.780]
                    order: function() { return feature.sort_rank + 1; }

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                waves:
                    color: [0.880, 0.880, 0.880]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir, playa] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                waves:
                    color: [0.880, 0.880, 0.880]
        playas:
            filter: { kind: playa, $zoom: {min: 6} }
            draw:
                waves:
                    color: [0.880, 0.880, 0.880]
        swimming_pool:
            filter: { kind: swimming_pool }
            draw:
                waves:
                    color: [0.880, 0.880, 0.880]
        water-boundary-ocean-early:
            filter: { boundary: true, kind: ocean, $zoom: {min: 1, max: 17} }
            draw:
                coast:
                    order: global.feature_order
                    color: [[1,[0.70,0.70,0.70]],[5,[0.60,0.60,0.60]],[6,[0.50,0.50,0.50]]]
                    width: [[2, 1.0px],[6, 1px], [7, 2px],[10, 2px], [14, 2px]]
                    join: round
        water-boundary-ocean-late:
            filter: { boundary: true, kind: ocean, $zoom: {min: 17} }
            draw:
                coast:
                    order: global.feature_order
                    color: [0.661, 0.661, 0.661]
                    width: [[14, 4px],[17, 4px],[20, 10px]]
                    join: round
        water_boundaries-not-ocean:
            filter: { boundary: true, not: { kind: ocean }, $zoom: { min: 8 } }
            draw:
                coast:
                    order: global.feature_order
                    color: [[6, [0.900, 0.900, 0.900]], [10, [0.761, 0.761, 0.761]],[11,[0.50,0.50,0.50]]]
                    width: [[6,0.75px], [10,1.0px], [14,2.0px], [15,2.0px], [16,3.0px]]
                    join: round
            early:
                filter: { $zoom: { min: 14 } }
                draw:
                    lines:
                        order: 241
            swimming-pools-early:
                filter: { kind: swimming_pool, $zoom: { max: 19 } }
                draw:
                    coast:
                        visible: false
            riverbank:
                # river boundaries like the thames in london, la seine in paris
                filter: { kind: riverbank }
                draw:
                    coast:
                        color: [0.200, 0.200, 0.200]
                        width: [[9,0.5px],[10,0.75px],[11,1px],[14,1px],[15,2px],[17,2px]]
        river:
            #river center lines, not boundaries for polygons
            filter: { kind: [river,canal,stream,dam,ditch,drain], $zoom: { min: 14 }, not: { is_tunnel: true } }
            draw:
                stream-waves:
                    order: global.feature_order
                    interactive: true
                    color: [0.840,0.840,0.840]
                    width: [[14,0.5px],[15,2.0px],[17,6.0px],[18,8.0px]]
                    cap: round

    subway-light-rail:
        data: { source: mapzen, layer: transit }
        filter: { not: { kind: [platform] }, $zoom: { min: 14 } }
        draw:
            lines:
                interactive: true
                order: function() { return feature.sort_rank || 275; }
        railway:
            filter: { kind: [railway,train] }
            draw:
                lines:
                    color: [0.70,0.70,0.70]
                    width: [[14,0.5px],[16,1px],[18,1px]]
        subway:
            filter: { kind: subway }
            draw:
                lines:
                    color: [0.70,0.70,0.70]
                    width: [[14,0.5px],[16,1px],[18,1px]]
        light_rail:
            filter: { kind: [light_rail,tram], $zoom: { min: 15 } }
            draw:
                lines:
                    order: 415
                    color: [0.70,0.70,0.70]
                    width: [[14,0px],[15,0.6px],[16,1px],[17,1px]]

    railway-late:
        data: { source: mapzen, layer: roads }
        filter: { kind: rail, not: { railway: [subway,light_rail,tram] } }
        draw:
            lines:
                interactive: true
                color: [[14,'#bbb'],[16,'#999']]
                width: [[12,0px],[13,0.25px],[14,0.4px],[15,0.75px],[16,0.75px],[18,1px]]
                # let roads sort themselves past zoom 14
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 354
        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: function() { return feature.sort_rank || 305; }
        service:
            filter: { service: true }
            draw:
                lines:
                    color: [0.70,0.70,0.70]
                    width: [[14,0px],[15,0.5px],[16,0.75px],[17,1px],[18,1px]]
    # platforms:
    #     data: { source: mapzen, layer: transit }
    #     filter: { kind: platform }
    #     draw:
    #         lines_transparent:
    #             color: [0.569,0.690,0.722,0.5]
    #             width: 5m
    #             visible: global.grey9_v
    #     polygon_geom:
    #         filter: { $geometry: polygon }
    #         draw:
    #             polygons_transparent:
    #                 color: [0.592,0.671,0.694,0.5]
    #                 visible: global.grey9_v
    #             lines_transparent:
    #                 visible: false
    #             outline_transparent:
    #                 color: global.grey9_o
    #                 width: [[15,0px],[16,0.5px],[17,1px],[19,2px]]
    #     z-order:
    #         draw:
    #             lines_transparent:
    #                 order: function() { if($zoom<17) { return 10; } else { return 100; } }
    #             polygons_transparent:
    #                 order: function() { if($zoom<17) { return 10; } else { return 100; } }
    #             outline_transparent:
    #                 order: function() { if($zoom<17) { return 11; } else { return 101; } }

    roads:
        data: { source: mapzen, layer: roads }
        filter: { not: { kind: rail } }
        draw:
            lines:
                interactive: true
                #color: black
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                font:
                    family: global.text_font_family
                    weight: 500
                    fill: global.text_fill

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order
        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    #cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    color: [[5, [0.5,0.5,0.5]],[6, black]]
                    width: [[5, 0.5px], [6, 0.5px], [7, 0.75px], [9, 1.5px], [14, 1.5px], [16, 4px], [17, 10m]]
                    outline:
                        color: global.highway_casing1
                        width: [[9, 0px], [10, 0px], [12, 1px], [16, 2px]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [[5, [0.75,0.75,0.75]], [8, [0.4,0.4,0.4]], [13, [0.4,0.4,0.4]], [17, global.major_road1]]
                        #color: red
                        width: [[5, 0.25px], [7, 0.5px], [7, 0.75px], [9, 1px], [10, 9px], [11, 9px], [13, 1px], [16, 2.5px], [19, 6m]]
                        outline:
                            width: [[8, 0.0px], [9, 0.0px], [11, .5px], [16, .75px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [[12, global.minor_road1], [17, global.minor_road2]]
                        width: [[12, 1.0px], [14, 1.5px], [15, 3px], [16, 5m]]
                        outline:
                            width: [[12, 0px], [14, .5px], [17, 1px]]
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        color: global.ferry1
                        width: [[12, 0.5px], [13, 0.75px], [15, 1.0px]]
                        outline:
                            width: 0px
        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[8, [0.0,0.0,0.0]], [15, [0.0,0.0,0.0]], [16, [1.0,1.0,1.0]]]
                    width: [[8, 1px], [12, 1px], [14, 1.75px], [15, 3px], [16, 3px], [17, 5px], [18, 4m], [19, 5m]]
                    outline:
                        color: [[8, [1.0,1.0,1.0]], [15, [1.0,1.0,1.0]], [16, [0.00,0.00,0.00]]]
                        width: [[8,0px], [15,0px], [16, 3px], [17, 4px], [18, 5px], [19, 6px]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        #color: global.highway_link1
                        color: [[9, [0.0,0.0,0.0]], [15, [0.0,0.0,0.0]], [16, [1.0,1.0,1.0]]]
                        width: [[9, 0px], [11, 0.15px], [12, 0.5px], [13, 0.75px], [14, 0.75px], [15, 1.5px], [16, 2px], [17, 2px], [18, 4px], [19, 8px]]
                        outline:
                            color: [[9,[1.0,1.0,1.0]], [15,[1.0,1.0,1.0]], [16,[0.00,0.00,0.00]]]
                            width: [[9, 0px], [15, 0px], [16, 1px], [17, 1px], [18, 2px]]
                early_link:
                    filter: { $zoom: {min: 13, max: 15} }
                    draw:
                        lines:
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [[13, global.highway_tunnel1], [14, global.highway_tunnel1], [15,[0.8,0.8,0.8]], [16,[0.970,0.970,0.970]]]
                            outline:
                                color: [[13, global.highway_tunnel_casing1], [15, global.highway_tunnel_casing1], [16, [0.80,0.80,0.80]]]
                                width: [[9, 0px], [15, 0px], [16, 1px], [17, 1px], [18, 2px]]
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: [[13, global.highway_tunnel1], [14, global.highway_tunnel1], [15,[0.8,0.8,0.8]], [16,[0.950,0.950,0.950]]]
                        outline:
                            color: [[13, global.highway_tunnel_casing1], [15, global.highway_tunnel_casing1], [16, [0.85,0.85,0.85]]]
                            width: [[8,0px], [15,0px], [16, 3px], [17, 4px], [18, 5px], [19, 6px]]
            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            # labels-highway-early:
            #     filter: { $zoom: [7,8,9] }
            #     draw:
            #         text-blend-order:
            #             priority: 50
            #             visible: global.text_visible_shields
            #             text_source: ref
            #             font:
            #                 fill: [0.35,0.35,0.35]
            #                 weight: 400
            #                 size: 9px
            #                 stroke: { color: [1.0,1.0,1.0], width: 4 }
            # labels-highway-z10:
            #     filter:
            #         $zoom: 10
            #     draw:
            #         text-blend-order:
            #             visible: global.text_visible_shields
            #             text_source: ref
            #             font:
            #                 fill: [0.25,0.25,0.25]
            #                 weight: 400
            #                 size: 9px
            #                 stroke: { color: [1.0,1.0,1.0], width: 4 }
            # labels-highway-z11:
            #     filter:
            #         $zoom: 11
            #     draw:
            #         text-blend-order:
            #             visible: global.text_visible_shields
            #             text_source: ref
            #             font:
            #                 fill: [0.25,0.25,0.25]
            #                 weight: 600
            #                 size: 10px
            #                 stroke: { color: [1.0,1.0,1.0,0.75], width: 4 }
            # labels-highway-z12:
            #     filter:
            #         $zoom: 12
            #     draw:
            #         text-blend-order:
            #             visible: global.text_visible_shields
            #             text_source: ref
            #             font:
            #                 fill: global.text_fill
            #                 weight: 600
            #                 size: 10px
            #                 stroke: { color: [1.0,1.0,1.0,0.75], width: 4 }
            labels-highway-z13:
                filter:
                    $zoom: 13
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        #text_source: ref
                        text_source: global.ux_language_text_source_road_ref_and_name
                        font:
                            fill: global.text_fill
                            weight: 600
                            size: 11px
                            stroke: { color: [1.0,1.0,1.0,0.75], width: 4 }
            labels-highway-z14:
                filter:
                    $zoom: 14
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        #text_source: ref
                        text_source: global.ux_language_text_source_road_ref_and_name
                        font:
                            fill: global.text_fill
                            weight: 600
                            size: 11px
                            stroke: { color: [1.0,1.0,1.0,0.85], width: 4 }
            labels-highway-z15:
                filter:
                    $zoom: 15
                draw:
                    text-blend-order:
                        visible: global.text_visible_highway
                        font:
                            fill: [1.0,1.0,1.0]
                            weight: 600
                            size: 12px
                            stroke: { color: [0.0,0.0,0.0], width: 3 }
            labels-highway-z16:
                filter: { $zoom: { min: 16, max: 18 } }
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        font:
                            fill: [1.0,1.0,1.0]
                            weight: 600
                            size: 13px
                            stroke: { color: [0.0,0.0,0.0], width: 3 }
            labels-highway-z17:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        font:
                            fill: [1.0,1.0,1.0]
                            weight: 600
                            size: 15px
                            stroke: { color: [0.0,0.0,0.0], width: 4 }
            labels-highway-z18:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        font:
                            fill: [1.0,1.0,1.0]
                            weight: 600
                            size: 16px
                            stroke: { color: [0.0,0.0,0.0], width: 4 }
            labels-highway-z19:
                filter: { $zoom: { min: 19 } }
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        font:
                            fill: [0.0,0.0,0.0]
                            weight: 600
                            size: 16px
                            stroke: { color: [1.0,1.0,1.0], width: 4 }

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [[8, global.major_road4], [13, major_road2], [17, [1.0,1.0,1.0]]]
                    width: [[13, 1px], [14, 1px], [16, 2.5px], [17,3px]]
                    outline:
                        width: [[12, 0px], [13, .5px], [15, 1px], [17, 2px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[8, [0.8,0.8,0.8]], [10, [0.8,0.8,0.8]], [12, [0.5,0.5,0.5]], [13, [0.4,0.4,0.4]], [14, [0.3,0.3,0.3]], [15, [0.1,0.1,0.1]], [16, [1.0,1.0,1.0]]]
                        width: [[8, 0.5px], [11, 0.5px], [12, 0.75px], [13, 0.75px], [14, 1px], [15, 1.25px], [16, 2px], [17, 4px], [18, 4px], [19, 8px]]
                        outline:
                            color: [[8,[1.0,1.0,1.0]], [15,[1.0,1.0,1.0]], [16,[0.00,0.00,0.00]]]
                            width: [[8,1.5px], [16,1.5px], [17, 3px], [18, 4px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [[8, [0.5,0.5,0.5]], [11, [0.65,0.65,0.65]], [12, [0.2,0.2,0.2]], [13, [0.4,0.4,0.4]], [14, [0.0,0.0,0.0]], [15, [0.0,0.0,0.0]], [16, [1.0,1.0,1.0]]]
                            width: [[9, 0.5px], [10, 0.65px], [11, 0.65px], [12, 0.65px], [13, 0.65px], [14, 1.25px], [15, 1.25px], [16, 2px], [17, 4px], [18, 4px], [19, 8px]]
                            outline:
                                color: [[8,[1.0,1.0,1.0]], [15,[1.0,1.0,1.0]], [16,[0.00,0.00,0.00]]]
                                width: [[8,1.5px], [16,1.5px], [17, 3px], [18, 4px]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    # national-routes:
                    #     filter: { network: [US:US, US:I] }
                    #     draw:
                    #         lines:
                    #             color: global.major_route1
                    #             #color: [[8, global.major_route2],[9,major_route2],[10, global.major_route1]]
                    #             width: [[8, 1px], [10, 1.15px], [11, 1px], [12, 1px], [14, 1.75px], [15, 3px], [16, 4px], [17, 4px]]
                    #             outline:
                    #                 color: [1.0,1.0,1.0]
                    #                 width: 2px
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: [[13,[0.70,0.70,0.70]], [14,[0.70,0.70,0.70]], [15,[0.8,0.8,0.8]], [16,[0.950,0.950,0.950]]]
                                outline:
                                    color: [[13, [1.00,1.00,1.00]], [15, [1.00,1.00,1.00]], [16, [0.85,0.85,0.85]]]
                                    width: [[8,2px], [16,1.5px], [17, 3px], [18, 3px]]
                    labels-trunk_primary-route-z14:
                        filter: { $zoom: [13,14] }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary_e2
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    fill: [0.15,0.15,0.15]
                                    size: 11px
                                    stroke: { color: global.text_stroke, width: 3 }
                    labels-trunk_primary-route-z15:
                        filter: { $zoom: [15] }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    fill: [0.0,0.0,0.0]
                                    weight: 600
                                    size: 12px
                                    stroke: { color: global.text_stroke, width: 3 }
                    labels-trunk_primary-route-z16:
                        filter: { $zoom: { min: 16 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    fill: [0.0,0.0,0.0]
                                    weight: 600
                                    size: 13px
                                    stroke: { color: global.text_stroke, width: 4 }
                    labels-trunk_primary-route-z17-z18:
                        filter: { $zoom: [17,18] }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    fill: [0.0,0.0,0.0]
                                    weight: 600
                                    size: 13px
                                    stroke: { color: global.text_stroke, width: 6 }
                    labels-trunk_primary-route-z19:
                        filter: { $zoom: { min: 19 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    fill: [0.0,0.0,0.0]
                                    weight: 600
                                    size: 16px
                                    stroke: { color: global.text_stroke, width: 6 }
                labels-trunk_primary-z11:
                    filter:
                        $zoom: [11]
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary_e
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 9px
                                stroke: { color: global.text_stroke, width: 3 }
                labels-trunk_primary-z12:
                    filter:
                        $zoom: [12]
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary_e
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 10px
                                stroke: { color: global.text_stroke, width: 3 }
                labels-trunk_primary-z13:
                    filter:
                        $zoom: [13]
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 11px
                                stroke: { color: global.text_stroke, width: 3 }
                labels-trunk_primary-z14:
                    filter:
                        $zoom: [14]
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 11px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-trunk_primary-z15:
                    filter: { $zoom: [15] }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.15,0.15,0.15]
                                size: 12px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-trunk_primary-z16:
                    filter: { $zoom: [16] }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name
                            font:
                                fill: [0.15,0.15,0.15]
                                weight: 600
                                size: 13px
                                stroke: { color: [1.0,1.0,1.0,0.85], width: 4 }
                labels-trunk_primary-z17:
                    filter: { $zoom: [17] }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name
                            font:
                                fill: [0.15,0.15,0.15]
                                weight: 600
                                size: 13px
                                stroke: { color: global.text_stroke, width: 6 }
                labels-trunk_primary-z18:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name
                            font:
                                fill: global.text_fill
                                weight: 600
                                size: [[18,13px],[19,16px]]
                                stroke: { color: global.text_stroke, width: 6 }
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[10, [0.4,0.4,0.4]], [14, [0.75,0.75,0.75]], [15, [0.89, 0.89, 0.89]], [16, [1.0,1.0,1.0]]]
                        width: [[10, 0.5px], [14, 1.5px], [15, 1px], [16, 1.75px], [17, 2px], [18, 3px], [19, 8px]]
                        outline:
                            color: [[10, [1.0,1.0,1.0]], [15, [0.50,0.50,0.50]], [16, [0.00,0.00,0.00]]]
                            width: [[10, 0px], [14, 0px], [15, 0px], [16, 1px], [17, 1px], [18, 1px]]
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: [[13,[0.70,0.70,0.70]], [14,[0.70,0.70,0.70]], [15,[0.8,0.8,0.8]], [16,[0.950,0.950,0.950]]]
                        outline:
                            color: [[13, [1.00,1.00,1.00]], [15, [1.00,1.00,1.00]], [16, [0.85,0.85,0.85]]]
                            width: [[8,1.5px], [16,1.5px], [17, 3px], [18, 3px]]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [[10, [0.75,0.75,0.75]], [11, [0.75,0.75,0.75]], [12, [0.6,0.6,0.6]], [13, [0.4,0.4,0.4]], [14, [0.35,0.35,0.35]], [15, [0.35,0.35,0.35]], [16, [0.0,0.0,0.0]], [17, [1.0,1.0,1.0]]]
                        width: [[10, 0.5px], [12, 0.5px], [13, 0.65px], [14, 1px], [15, 1.25px], [16, 2px], [17, 3px], [18, 3px], [19, 8px]]
                        outline:
                            color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                            width: [[10,2px], [16,0px], [17, 2px], [18, 2px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: 353 #function() { return feature.sort_rank + 2; }
                routes:
                    filter: { ref: true, $zoom: { min: 12} }
                    draw:
                        lines:
                            color: [[12, [0.6,0.6,0.6]], [13, [0.4,0.4,0.4]], [14, [0.35,0.35,0.35]], [16, [0.35,0.35,0.35]], [17, [1.0,1.0,1.0]]]
                            width: [[11, 0.5px], [12, 0.5px], [13, 0.65px], [14, 1px], [15, 1.25px], [16, 2px], [17, 3px], [18, 3px], [19, 8px]]
                            outline:
                                color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                                width: [[10,2px], [16,0px], [17, 2px], [18, 2px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: [[13,[0.70,0.70,0.70]], [14,[0.70,0.70,0.70]], [15,[0.8,0.8,0.8]], [16,[0.85,0.85,0.85]], [17,[0.950,0.950,0.950]]]
                                outline:
                                    color: [[13, [1.00,1.00,1.00]], [16, [1.00,1.00,1.00]], [17, [0.85,0.85,0.85]]]
                                    width: [[10,2px], [17, 2px], [18, 2px]]
                    labels-secondary-routes:
                        filter: { $zoom: [13] }
                        draw:
                            text-blend-order:
                                priority: 56
                                visible: global.text_visible_secondary_e
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                font:
                                    fill: global.text_fill
                                    size: 11px
                                    stroke: { color: global.text_stroke, width: 4 }
                    labels-secondary-routes-z15:
                        filter: { $zoom: { min: 15 } }
                        draw:
                            text-blend-order:
                                priority: 56
                                visible: global.text_visible_secondary_e
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                font:
                                    fill: global.text_fill
                                    weight: 600
                                    size: 11px
                                    stroke: { color: global.text_stroke, width: 4 }
                    labels-secondary-routes-z16:
                        filter: { $zoom: { min: 16 } }
                        draw:
                            text-blend-order:
                                priority: 56
                                visible: global.text_visible_secondary_e
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                font:
                                    fill: global.text_fill
                                    weight: 600
                                    size: 12px
                                    stroke: { color: global.text_stroke, width: 4 }
                in_park:
                    filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden] }
                    draw:
                        lines:
                            color: [[10, [0.75,0.75,0.75]], [11, [0.75,0.75,0.75]], [12, [0.6,0.6,0.6]], [13, [0.4,0.4,0.4]], [14, [0.35,0.35,0.35]], [15, [0.35,0.35,0.35]], [16, [0.0,0.0,0.0]], [17, [1.0,1.0,1.0]]]
                            width: [[10, 0.5px], [12, 0.5px], [13, 0.65px], [14, 1px], [15, 1.25px], [16, 2px], [17, 3px], [18, 3px], [19, 8px]]
                            outline:
                                color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                                width: [[12, 0px], [13, 0.5px], [14, 1.0px], [16,0px], [17, 2px], [18, 2px]]
                    golf_course:
                        filter: { landuse_kind: golf_course }
                        draw:
                            lines:
                                outline:
                                    color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                    nature_reserve:
                        filter: { landuse_kind: nature_reserve }
                        draw:
                            lines:
                                outline:
                                    color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                    conservation:
                        filter: { landuse_kind: conservation }
                        draw:
                            lines:
                                outline:
                                    color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                    zoo:
                        filter: { landuse_kind: zoo }
                        draw:
                            lines:
                                outline:
                                    color: [[10, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                labels-secondary-z13:
                    filter:
                        $zoom: [13]
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary_e
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 9px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-secondary-z14:
                    filter:
                        $zoom: [14]
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary_e
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 9px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-secondary-z15:
                    filter:
                        $zoom: [15]
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.15,0.15,0.15]
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-secondary-z16:
                    filter: { $zoom: { min: 16, max: 18 } }
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.15,0.15,0.15]
                                size: 12px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-secondary-z17:
                    filter: { $zoom: { min: 17 } }
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary
                            #text_source: ref
                            text_source: global.ux_language_text_source_road_ref_and_name
                            font:
                                # need a fill color here?
                                fill: global.text_fill
                                size: 13px
                                stroke: { color: global.text_stroke, width: 4 }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [[11, [0.885,0.885,0.885]], [13, [0.60,0.60,0.60]], [15, [0.60,0.60,0.60]], [16, [0.30,0.30,0.30]], [17, [1.0,1.0,1.0]]]
                        width: [[11, 0.5px], [12, 0.65px], [13, 0.65px], [14, 1px], [15, 1px], [16, 2px], [17, 3px], [18, 3px], [19, 8px]]
                        outline:
                            color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                            width: [[11, 2px], [16,0px], [17, 2px], [18, 2px]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 12} }
                    draw:
                        lines:
                            color: [[11, [0.885,0.885,0.885]], [13, [0.8,0.8,0.8]], [14, [0.75,0.75,0.75]], [15, [0.6,0.6,0.6]], [17, [1.0,1.0,1.0]]]
                            width: [[11, 0.5px], [12, 0.75px], [13, 1px], [14, 1px], [15, 1px], [16, 2px], [17, 3px], [18, 3px], [19, 8px]]
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                                width: [[11, 2px], [16,0px], [17, 2px], [18, 2px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: global.major_tunnel1
                                outline:
                                    color: global.major_tunnel_casing1
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [[14, [0.75,0.75,0.75]], [15, [0.60, 0.60, 0.60]], [16, [0.3,0.3,0.3]], [17, [1.00,1.00,1.00]]]
                            width: [[11, 0.0px], [12, 0.15px], [14, 0.15px], [15, 0.75px], [16, 1.25px], [17, 2px], [18, 2px], [19, 4px]]
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                                width: [[11, 0px], [16, 0px], [17, 1px], [18, 1px]]
                in_park:
                    filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden] }
                    draw:
                        lines:
                            #width: [[11, 0.0px], [12, .5px], [14, 1.5px], [16, 2.0px], [19, 7m]]
                            color: [[11, [0.885,0.885,0.885]], [13, [0.60,0.60,0.60]], [15, [0.60,0.60,0.60]], [16, [0.30,0.30,0.30]], [17, [1.0,1.0,1.0]]]
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                                width: [[11, 2px], [16,0px], [17, 2px], [18, 2px]]
                    golf_course:
                        filter: { landuse_kind: golf_course }
                        draw:
                            lines:
                                outline:
                                    color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                    nature_reserve:
                        filter: { landuse_kind: nature_reserve }
                        draw:
                            lines:
                                outline:
                                    color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                    conservation:
                        filter: { landuse_kind: conservation }
                        draw:
                            lines:
                                outline:
                                    color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                    zoo:
                        filter: { landuse_kind: zoo }
                        draw:
                            lines:
                                outline:
                                    color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                labels-tertiary-z13:
                    filter: { $zoom: [13] }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary_e
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 9px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-tertiary-z14:
                    filter: { $zoom: [14] }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary_e
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.35,0.35,0.35]
                                size: 9px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-tertiary-z15:
                    filter: { $zoom: [15] }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.15,0.15,0.15]
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-tertiary-z16:
                    filter: { $zoom: [16] }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.15,0.15,0.15]
                                size: 12px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-tertiary-z17:
                    filter: { $zoom: { min: 17, max: 18 } }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [0.15,0.15,0.15]
                                size: 13px
                                stroke: { color: global.text_stroke, width: 4 }
                labels-tertiary-z18:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: global.text_fill
                                size: 13px
                                stroke: { color: global.text_stroke, width: 4 }
        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[11, [0.885,0.885,0.885]], [13, [0.80,0.80,0.80]], [14, [0.75,0.75,0.75]], [15, [0.5,0.5,0.5]], [16, [0.3,0.3,0.3]], [17, [1.0,1.0,1.0]]]
                    width: [[11, 0.35px], [13, 0.5px], [14, 1px], [15, 1px], [16, 2px], [17, 3px], [18, 3px], [19, 8px]]
                    outline:
                        color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.30,0.30,0.30]], [18, [0.00,0.00,0.00]]]
                        width: [[11, 1px], [16, 0px], [17, 1.5px], [18, 1.5px]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351

            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            in_park:
                filter: { landuse_kind: [park,protected_area,nature_reserve,conservation,golf_course,garden,wood,farmland,farm] }
                draw:
                    lines:
                        color: [[11, [0.885,0.885,0.885]], [13, [0.75,0.75,0.75]], [14, [0.70,0.70,0.70]], [15, [0.6,0.6,0.6]], [16, [0.3,0.3,0.3]], [17, [1.0,1.0,1.0]]]
                        outline:
                            color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.30,0.30,0.30]], [18, [0.00,0.00,0.00]]]
                            width: [[11, 1px], [16, 0px], [17, 1.5px]]
                golf_course:
                    filter: { landuse_kind: golf_course }
                    draw:
                        lines:
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.30,0.30,0.30]], [18, [0.00,0.00,0.00]]]
                nature_reserve:
                    filter: { landuse_kind: nature_reserve }
                    draw:
                        lines:
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.30,0.30,0.30]], [18, [0.00,0.00,0.00]]]
                conservation:
                    filter: { landuse_kind: conservation }
                    draw:
                        lines:
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.30,0.30,0.30]], [18, [0.00,0.00,0.00]]]
                zoo:
                    filter: { landuse_kind: zoo }
                    draw:
                        lines:
                            outline:
                                color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.30,0.30,0.30]], [18, [0.00,0.00,0.00]]]
            in_university:
                filter: { landuse_kind: university }
                draw:
                    lines:
                        color: [[11, [0.885,0.885,0.885]], [13, [0.75,0.75,0.75]], [14, [0.70,0.70,0.70]], [15, [0.6,0.6,0.6]], [16, [0.3,0.3,0.3]], [17, [1.0,1.0,1.0]]]
                        outline:
                            color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                            width: [[11, 1px], [16, 0px], [17, 1.5px]]
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    lines:
                        color: [[11, [0.885,0.885,0.885]], [13, [0.75,0.75,0.75]], [14, [0.70,0.70,0.70]], [15, [0.6,0.6,0.6]], [16, [0.3,0.3,0.3]], [17, [1.0,1.0,1.0]]]
                        outline:
                            color: [[11, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]], [17, [0.00,0.00,0.00]]]
                            width: [[11, 1px], [16, 0px], [17, 1.5px]]

            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: global.minor_tunnel1
                        outline:
                            color: global.minor_tunnel_casing1
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-minor_road-z15:
                filter: { $zoom: 15 }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: global.text_visible_minor_road_e
                        text_source: name
                        font:
                            fill: [0.45,0.45,0.45]
                            size: 10px
                            stroke: { color: global.text_stroke, width: 4 }
            labels-minor_road-z16:
                filter: { $zoom: 16 }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: global.text_visible_minor_road_e
                        text_source: name
                        font:
                            fill: [0.15,0.15,0.15]
                            size: 12px
                            stroke: { color: global.text_stroke, width: 4 }
            labels-minor_road-z17:
                filter: { $zoom: { min: 17, max: 18 } }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: global.text_visible_minor_road_e
                        text_source: name
                        font:
                            fill: [0.15,0.15,0.15]
                            size: 12px
                            stroke: { color: global.text_stroke, width: 4 }
            labels-minor_road-z18:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: global.text_visible_minor_road
                        text_source: name
                        font:
                            # needs a fill color?
                            fill: global.text_fill
                            size: 13px
                            stroke: { color: global.text_stroke, width: 4 }
        service_road:
            filter: { kind: minor_road, kind_detail: service, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[14, [0.75,0.75,0.75]], [15, [0.60,0.60,0.60]], [16, [0.30,0.30,0.30]], [17, [1.0,1.0,1.0]]]
                    width: [[14, 0.15px], [15, 0.75px], [16, 1.25px], [17, 3px], [18, 3px], [19, 6px]]
                    outline:
                        color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                        width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px], [19, 1.5px]]
            in_park:
                filter: { landuse_kind: [park,forest,nature_reserve,conservation,golf_course,garden] }
                draw:
                    lines:
                        color: [[14, [0.75,0.75,0.75]], [15, [0.60,0.60,0.60]], [16, [0.30,0.30,0.30]], [17, [1.0,1.0,1.0]]]
                        outline:
                            color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                            width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
                golf_course:
                    filter: { landuse_kind: golf_course }
                    draw:
                        lines:
                            outline:
                                color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                                width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
                nature_reserve:
                    filter: { landuse_kind: nature_reserve }
                    draw:
                        lines:
                            outline:
                                color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                                width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
                conservation:
                    filter: { landuse_kind: conservation }
                    draw:
                        lines:
                            outline:
                                color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                                width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
                zoo:
                    filter: { landuse_kind: zoo }
                    draw:
                        lines:
                            outline:
                                color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                                width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
            in_cemetery_garden:
                filter: { landuse_kind: [cemetery,garden] }
                draw:
                    lines:
                        outline:
                            color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                            width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
            in_university:
                filter: { landuse_kind: university }
                draw:
                    lines:
                        outline:
                            color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                            width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    lines:
                        outline:
                            color: [[14,[1.0,1.0,1.0]], [16,[1.0,1.0,1.0]], [17,[0.30,0.30,0.30]], [18,[0.00,0.00,0.00]]]
                            width: [[13, 0px], [14, 0.5px], [16, 0px], [17, 1.0px]]
            labels-service_road:
                filter: { $zoom: 17 }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: global.text_visible_service_road
                        text_source: name
                        font:
                            # need fill color?
                            fill: [0.25,0.25,0.25]
                            size: 12px
                            stroke: { color: global.text_stroke, width: 4 }
            labels-service_road-z18:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: global.text_visible_service_road
                        text_source: name
                        font:
                            # need fill color?
                            fill: [0.15,0.15,0.15]
                            size: 13px
                            stroke: { color: global.text_stroke, width: 4 }

        shields:
            filter:
                $zoom: { min: 6 }
                #
                # United State looks great with shield_text alone, but...
                #
                #shield_text: true    # some roads don't have shield text, deal with that later
                #
                # Europe doesn't have many network relations set, so we could look for either
                # shield_text or ref (with no shield_text) but...
                # that makes United States look a bit funky with `(xxx)` and generic shields
                # showing up in fields of custom state shields like US:CA and US:NY
                #
                any:
                    - shield_text: true    # some roads don't have shield text, deal with that later
                    - all:
                        - shield_text: false    # some roads don't have shield text, deal with that later
                        - ref: true
                        - kind_detail: [motorway, trunk, primary, secondary, tertiary]
            # default
            draw:
                icons:
                    # you need to match any custom shield to the vector tile `network` values
                    sprite: |
                        function() {
                            if( feature.shield_text ) {
                                return ('generic_shield-' + feature.shield_text.length + 'char');
                            } else {
                                return ('generic_shield-' + feature.ref.length + 'char');
                            }
                        }
                    sprite_default: generic_shield_5char
                    priority: 58
                    repeat_group: shields
                    repeat_distance: [[8,90px],[10,40px],[13,30px]]
                    placement: midpoint
                    placement_min_length_ratio:
                        - [8, 0.1]
                        - [9, 0.25]
                        - [10, 0.25]
                        - [11, 0.15]
                        - [12, 1]
                        - [13, 1.50]
                        - [14, 2.0]
                    cull_from_tile: true
                    visible: false
                    text:
                        offset: [0px, -0.5px]
                        repeat_distance: 200px
                        anchor: center
                        text_source: |
                            function() {
                                if( feature.shield_text ) {
                                    return feature.shield_text;
                                } else {
                                    return feature.ref;
                                }
                            }
                        font:
                            family: Montserrat
                            fill: [0.00,0.00,0.00]
                            size: [[7,7px],[12,8px],[16,11px]]

            default_priority_highway:
                filter:
                    all:
                        - kind_detail: motorway
                        - $zoom: { min: 9 }
                draw:
                    icons:
                        priority: 47
                        #color: yellow
                        visible: global.text_visible_shields

            default_priority_trunk:
                filter:
                    all:
                        - kind_detail: [trunk]
                        - $zoom: { min: 10 }
                draw:
                    icons:
                        priority: 48
                        #color: red
                        visible: global.text_visible_shields
            default_priority_primary:
                filter:
                    all:
                        - kind_detail: [primary]
                        - $zoom: { min: 12 }
                draw:
                    icons:
                        priority: 49
                        #color: aqua
                        visible: global.text_visible_shields
            default_priority_trunk_secondary:
                filter:
                    all:
                        - kind_detail: [secondary]
                        - $zoom: { min: 12 }
                draw:
                    icons:
                        priority: 53
                        #color: blue
                        visible: global.text_visible_shields
            default_priority_trunk_tertiary:
                filter:
                    all:
                        - kind_detail: tertiary
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 55
                        #color: green
                        visible: global.text_visible_shields
            # not-special:
            #     filter:
            #         not: { network: ['US:I','US:US'] }
            #         $zoom: { max: 9 }
            #     draw:
            #         icons:
            #             visible: false
            width_1char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 1)
                        } else {
                            return (feature.ref.length === 1)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[14px,14px]],[13,[16px,16px]],[16,[18px,18px]]]
            width_2char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 2)
                        } else {
                            return (feature.ref.length === 2)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[18px,14px]],[13,[20px,15px]],[16,[24px,18px]]]
            width_3char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 3)
                        } else {
                            return (feature.ref.length === 3)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[25px,14px]],[13,[27px,15px]],[16,[33px,18px]]]
            width_4char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 4)
                        } else {
                            return (feature.ref.length === 4)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[29px,14px]],[13,[31px,15px]],[16,[38px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            width_5char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 5)
                        } else {
                            return (feature.ref.length === 5)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[34px,14px]],[13,[37px,15px]],[16,[45px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            # this is kinda a hack
            width_longggggg:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length > 5)
                        } else {
                            return (feature.ref.length > 5)
                        }
                    }
                draw:
                    icons:
                        visible: false
            # missing-route-relations:
            #     filter: { shield_text: false }
            #     draw:
            #         lines:
            #             order: 1000
            #             color: red
            #             width: 2px
            #
            # Now for the good stuff
            #
            legit-shields:
                filter: { shield_text: true }
                # draw:
                #     icons:
                #         color: red
                # US Interstate roads
                US-I:
                    filter:
                        network: 'US:I'
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            priority: 46
                            visible: global.text_visible_shields
                            text:
                                offset: [0px, 0.5px]
                                font:
                                    fill: [0.00,0.00,0.00]
                                    size: [[7,8px],[13,9px],[15,11px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[15px,18px]],[13,[17px,20px]],[15,[22px,25px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[25px,25px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[23px,18px]],[13,[26px,20px]],[15,[33px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[35px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[26px,18px]],[13,[30px,20px]],[15,[38px,25px]]]
                # US Federal Routes
                US-US:
                    filter:
                        network: ['US:US','US:US:Business', 'US:US:Truck', 'US:US:Alternate']
                        $zoom: { min: 7 }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: |
                                function() { return ('US:US-' + feature.shield_text.length + 'char'); }
                            priority: 47
                            cull_from_tile: true
                            visible: global.text_visible_shields
                            text:
                                offset: [0px, -0.7px]
                                font:
                                    fill: [0.00,0.00,0.00]
                                    size: [[7,8px],[13,9px],[15,11px]]
                    # early:
                    #     filter: { $zoom: [7] }
                    #     icons:
                    #         visible: false
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[15px,17px]],[13,[17px,19px]],[15,[22px,24px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,17px]],[13,[20px,19px]],[15,[26px,24px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[34px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,17px]],[13,[29px,19px]],[15,[39px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[27px,17px]],[13,[30px,19px]],[15,[41px,25px]]]
                # US State Routes
                # US-states:
                #     # Match state highways: `US:??`
                #     filter: |
                #         function() {
                #             return feature.shield_text &&
                #                 /^US:(?!US)\w\w$/.test(feature.network)
                #         }
                #     draw:
                #         icons:
                #             # you need to match any custom shield to the vector tile `network` values
                #             priority: 18
                #     early:
                #         filter: { $zoom: [7,8,9] }
                #         icons:
                #             visible: false
                US-CA:
                    # Match California state highways: `US:CA`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:CA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: [0.00,0.00,0.00]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    motorway:
                        filter: { kind_detail: [motorway], $zoom: [7,8] }
                        draw:
                            icons:
                                visible: global.text_visible_shields
                    trunk:
                        filter: { kind_detail: [trunk], $zoom: [8,9] }
                        draw:
                            icons:
                                visible: global.text_visible_shields
                    primary:
                        filter: { kind_detail: primary, $zoom: [10,11] }
                        draw:
                            icons:
                                visible: global.text_visible_shields
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[14px,16px]],[13,[15px,18px]],[15,[18px,21px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[23px,23px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[21px,18px]],[13,[24px,20px]],[15,[28px,23px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[24px,18px]],[13,[26px,20px]],[15,[31px,23px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[32px,23px]]]
                US-NY:
                    # Match New York state highways: `US:NY`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:NY$/.test(feature.network)
                                /* (/^US:NY$/.test(feature.network) || /^NY:US$/.test(feature.network)) */
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:NY-' + feature.shield_text.length + 'char'); }
                            text:
                                # offset: [0px, 1px]
                                font:
                                    fill: [0.00,0.00,0.00]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[20px,17px]],[13,[22px,19px]],[15,[27px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[29px,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30px,22px]]]
                US-PA:
                    # Match Pennsylvania state highways
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:PA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:PA-' + feature.shield_text.length + 'char'); }
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: [0.00,0.00,0.00]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[28px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30x,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[24px,17px]],[13,[27px,19px]],[15,[32px,22px]]]
                # USA County Routes
                US-counties:
                    # Match state highways: `US:??:*`
                    #
                    # this is very USA specific
                    #
                    # filter: |
                    #     function() {
                    #         return feature.shield_text &&
                    #             /^US:(?!US)\w\w:.*$/.test(feature.network)
                    #     }
                    #
                    # this generic for any country with 3rd level networks (like county routes in USA)
                    # BEWARE:
                    # US:US:Business  about 150
                    # US:US:Truck
                    # US:US:Alternate
    #
                    # STATE ROUTE
                    # ??:??:Loop  about 200
                    # ??:??:Spur  about 200
                    # ??:??:Business   about 100
    #
                    # STATE TEXAS SPECIAL ROUTE
                    # US:TX:FM -- probably just state? there are 3k of these
                    #
                    #
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^\w+:\w+:(!Alternate).+$/.test(feature.network) &&
                                $zoom > 10
                        }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return ('county_shield-' + feature.shield_text.length + 'char'); }
                            # priority: 19
                            visible: global.text_visible_shields
                            text:
                                font:
                                    fill: [0.00,0.00,0.00]
                                    #size: [[11,7px],[15,10px]]
                    # early:
                    #     filter: { $zoom: { max: 11 } }
                    #     draw:
                    #         icons:
                    #             visible: false
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[14px,14px]],[13,[16px,16px]],[15,[18px,18px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[16px,14px]],[13,[18px,16px]],[15,[22px,18px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[20px,14px]],[13,[21px,15px]],[15,[26px,18px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,14px]],[13,[28px,15px]],[15,[34px,18px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[30px,14px]],[13,[33px,15px]],[15,[40px,18px]]]

        path:
            filter:
                all:
                    - kind: path
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                    width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                    outline:
                        color: [0.790,0.790,0.790]
                        width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            early:
                filter:
                    $zoom: { max: 17 }
                draw:
                    lines:
                        order:
                            order: 351
                        outline:
                            order: 350
            pedestrian:
                filter: { kind_detail: pedestrian }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        cap: round
                        outline:
                            color: [[15, global.path_bridge_casing2],[16, global.path_bridge_casing1]]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
                            cap: butt
            in_park:
                filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden] }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
                golf_course:
                    filter: { landuse_kind: golf_course }
                    draw:
                        lines:
                            color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                            outline:
                                color: [0.790,0.790,0.790]
                                width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
                nature_reserve:
                    filter: { landuse_kind: nature_reserve }
                    draw:
                        lines:
                            color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                            outline:
                                color: [0.790,0.790,0.790]
                                width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
                conservation:
                    filter: { landuse_kind: conservation }
                    draw:
                        lines:
                            color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                            outline:
                                color: [0.790,0.790,0.790]
                                width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            in_cemetery_garden:
                filter: { landuse_kind: [cemetery,garden] }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            in_zoo:
                filter: { landuse_kind: zoo }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            in_university:
                filter: { landuse_kind: university }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        width: [[14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            labels-path:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: global.text_visible_path
                        text_source: name
                        font:
                            # need a fill color?
                            fill: [0.25,0.25,0.25]
                            size: 12px
                            stroke: { color: global.text_stroke, width: 4 }
        track:
            filter: { kind: path, kind_detail: track }
            draw:
                lines:
                    color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                    width: [[13, 0px], [14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                    cap: butt
                    join: round
                    outline:
                        color: [0.790,0.790,0.790]
                        width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: butt
                        width: [[13, 0px], [14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        cap: round
                        outline:
                            color: [1.0,1.0,1.0]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
                            cap: butt
            in_park:
                filter: { landuse_kind: [park,national_park,nature_reserve,conservation,golf_course,garden] }
                draw:
                    lines:
                        color: [[14, [0.790,0.790,0.790]], [15, [1.00,1.00,1.00]]]
                        width: [[13, 0px], [14, 0.35px], [15, 0px], [16, 0.25px], [17, 3px], [18, 3px], [19, 4px]]
                        outline:
                            color: [0.790,0.790,0.790]
                            width: [[14, 0.0px], [15, 0.35px], [16, 0.45px], [17, 0.85px], [18, 1px]]
        steps:
            filter:
                all:
                    - kind: path
                    - kind_detail: steps
            draw:
                dashedline:
                    order: global.feature_order
                    color: [1.0,1.0,1.0]
                    width: [[15, 0.5], [16, 0.75px], [17, 1px], [18, 2px], [19, 1.5m]]
                    outline:
                        color: global.path_steps1
                        width: 0px
            in_park:
                filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden] }
                draw:
                    dashedline:
                        color: global.path_steps1_b
                        outline:
                            color: [1.0,1.0,1.0]
            in_university:
                filter: { landuse_kind: university }
                draw:
                    dashedline:
                        color: global.path_steps1_b
                        outline:
                            color: [1.0,1.0,1.0]
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    dashedline:
                        color: global.path_steps1_b
                        outline:
                            color: [1.0,1.0,1.0]
            labels-steps:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 62
                        visible: global.text_visible_steps
                        text_source: name
                        font:
                            fill: [0.45,0.45,0.45]
                            size: 11px
                            stroke: { color: global.text_stroke, width: 4 }
        winter_sport_pistes:
            filter: { kind: piste }
            draw:
                lines:
                    order: 388   # We override the server value here because Eraser Map is also a special Ski Map
                    cap: round
                    join: round
                    color: [0.975,0.975,0.975]
                    width: [[13,0px],[14,1px],[15, 5px], [16, 6px], [18, 3m]]
                text-blend-order:
                    priority: 18
                    visible: global.text_visible_piste
                    font:
                        fill: global.text_fill_piste
                        size: 12px
                        # stroke: { color: global.grey8, width: 4 }
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    text-blend-order:
                        visible: false
            early-z15:
                filter: { $zoom: [15] }
                draw:
                    text-blend-order:
                        font:
                            fill: global.text_fill_piste_e
                            size: 11px
            easy:
                filter: { piste_difficulty: easy }
                draw:
                    lines:
                        color: [0.975,0.975,0.975]
            intermediate:
                filter: { piste_difficulty: intermediate }
                draw:
                    lines:
                        color: [0.975,0.975,0.975]
            advanced:
                filter: { piste_difficulty: advanced }
                draw:
                    lines:
                        color: [0.975,0.975,0.975]
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_advanced
            expert:
                filter: { piste_difficulty: expert }
                draw:
                    lines:
                        color: [0.975,0.975,0.975]
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_expert
        pier:
            filter: { kind: path, kind_detail: pier }
            draw:
                lines:
                    color: [0.993,0.993,0.993]
                    width: [[13, 0px], [14, 0.5px],[15, 1.5px], [16, 2.5px],[17, 3px],[18, 3m]]
                    outline:
                        color: [0.675,0.675,0.675]
                        width: [[15, 0px],[16,0.65px], [17, 0.75px], [18, 1px], [19, 1.5px]]
        racetrack:
            filter: { kind: racetrack }
            draw:
                lines:
                    interactive: true
                    cap: round
                    join: round
                    color: [0.0,0.0,0.0]
                    width: [[13,0.5px],[14,1px],[15, 1px], [16, 1.5px], [18, 3px], [19, 5px]]
        airport-lines:
            filter: { kind: aeroway }
            draw:
                lines:
                    color: [[11, [0.25,0.25,0.25]], [17, [0.0,0.0,0.0]]]
                    cap: butt
                    width: [[10, 1px], [11, 1.5px], [12, 2px], [13, 4px], [14, 8px], [15, 16px], [16, 32px], [17, 60m]]
                    outline:
                        color: [1.0,1.0,1.0]
            # Features come in at zoom 9, but include mostly minor airports without POIs until z13
            early:
                filter: { $zoom: { max: 12 }, not: { landuse_kind: [aerodrome, runway, taxiway] } }
                draw:
                    lines:
                        visible: false
            not-round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: butt
            taxiway:
                filter: { kind_detail: taxiway }
                draw:
                    lines:
                        color: [[14, [0.75,0.75,0.75]], [15, [0.6,0.6,0.6]], [16, [0.3,0.3,0.3]], [17, [0.0,0.0,0.0]]]
                        width: [[14, 1px], [17, 1.5px], [18, 4m]]
                        outline:
                            width: 0.5px
                            color: [1.0,1.0,1.0]
                early:
                    filter: { $zoom: { max: 13 } }
                    draw:
                        lines:
                            visible: false
        ferry:
            filter: { kind: ferry }
            draw:
                lines:
                    color: [[12, global.ferry1], [13, [0.80,0.80,0.80]]]
                    width: [[12, 0.5px], [13, 0.75px], [15, 1.0px]]
        aerialway:
            filter: { kind: aerialway }
            draw:
                lines:
                    interactive: true
                    color: [0.5,0.5,0.5]
                    width: [[14, 0.5px], [15, 1.0px], [16, 2m]]
            gondola_cable_car:
                filter: { kind_detail: [gondola, cable_car] }
                draw:
                    lines:
                        color: [0.5,0.5,0.5]
                        width: [[12, 0.5px], [13, 0.5px], [14, 0.6px], [15, 1px], [16, 2px]]
#                    lines_transparent:
#                        color: [0.5,0.5,0.5]
#                        width: [[12, 0px], [13, 5px], [14, 8px], [15, 10px], [16, 12px]]
            chair_lift:
                filter: { kind_detail: chair_lift }
                draw:
                    lines:
                        color: [0.5,0.5,0.5]
                        width: [[12, 0.5px], [13, 0.5px], [14, 0.6px], [15, 1px], [16, 1px], [16, 2px], [18, 3m]]
#                    lines_transparent:
#                        color: [0.5,0.5,0.5]
#                        width: [[12, 0px], [13, 5px], [14, 8px], [15, 10px], [16, 12px], [18, 20px]]
            aerialway-labels:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 63
                        visible: global.text_visible_aerialway
                        text_source: name
                        font:
                            fill: global.text_fill
                            size: 10px
                            stroke: { color: global.text_stroke_park, width: 4 }
                minor:
                    filter: { not: { kind_detail: [gondola,cable_car,chair_lift] }, $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false
                early_gondola:
                    filter: { $zoom: [14], kind_detail: [gondola,cable_car] }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
                later:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
       # set default footprint and extrusion draw properties, but don't draw by default (rules below will turn visibility on)
        draw:
            polygons:
                visible: false
                order: 329
                color: [1.000, 1.000, 1.000]
            lines:
                visible: false
                style: lines
                order: 330
                color: [[14, [0.8,0.8,0.8]], [15, [0.78,0.78,0.78]], [16, [0.67,0.67,0.67]],[17, [0.56,0.56,0.56]],[18, [0.45,0.45,0.45]], [19, [0.37,0.37,0.37]]]
                width: [[14,0.3px],[15,0.5px],[16,0.75px],[18,0.75px],[19,1px]]

        # turn interactive feature selection on for buildings with names
        interactive:
            filter: { name: true }
            draw: { polygons: { interactive: true } }

        # building footprints, pre-extrusion
        footprints:
            filter:
                $zoom: { max: 18 }
                any:
                    # show footprints for buildings at least one zoom level before they will be extruded
                    # - { $zoom: [13], area: { min: 50000 } }
                    # - { $zoom: [13], height: { min: 250 } }
                    # - { $zoom: [13], volume: { min: 200000 } }
                    # - { $zoom: [14], area: { min: 5000 } }
                    # - { $zoom: [14], height: { min: 190 } }
                    # - { $zoom: [14], volume: { min: 150000 } }
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 500 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 } }
            draw:
                polygons:
                    visible: true
                lines:
                    visible: true

        # 3d buildings
        extrude:
            filter:
                any:
                    - { $zoom: [15], height: { min: 190 } }
                    - { $zoom: [15], area: { min: 5000 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], height: { min: 100 } }
                    - { $zoom: [16], area: { min: 3500 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: [17], area: { min: 500 } }
                    - { $zoom: [17], volume: { min: 15000 } }
                    - { $zoom: { min: 18 } }
            draw:
                polygons:
                    visible: true
                    order: 438
                    style: building-grid
                    extrude: function() { return feature.height || 20; }
                    color: [1.0, 1.0, 1.0]
                lines:
                    visible: true
                    order: 439
                    style: building-lines
                    extrude: function() { return feature.height || 20; }

        # landuse-specific rules
        in_park:
            filter: { landuse_kind: [park,forest,nature_reserve,conservation,golf_course,garden] }
            draw:
                polygons:
                    color: [1.0,1.0,1.0]

            # golf_course:
            #     filter: { landuse_kind: golf_course }
            #     draw:
            #         polygons:
            #             color: global.building2
            # nature_reserve:
            #     filter: { landuse_kind: nature_reserve }
            #     draw:
            #         polygons:
            #             color: global.building2
            # conservation:
            #     filter: { landuse_kind: conservation }
            #     draw:
            #         polygons:
            #             color: global.building2
            # zoo:
            #     filter: { landuse_kind: zoo }
            #     draw:
            #         polygons:
            #             color: global.building2
        in_university:
            filter: { landuse_kind: [university,school] }
            draw:
                polygons:
                    color: [1.0,1.0,1.0]
        in_hospital:
            filter: { landuse_kind: hospital }
            draw:
                polygons:
                    color: [1.0,1.0,1.0]
        in_airport:
            filter: { landuse_kind: [aerodrome, runway, taxiway] }
            draw:
                polygons:
                    color: [1.0,1.0,1.0]
        in_retail:
           filter: { landuse_kind: retail }
           draw:
                polygons:
                    color: [1.0,1.0,1.0]

    building-labels:
        data: { source: mapzen, layer: buildings }
        filter:
            all:
                - { $zoom: { min: 16 } }
                - $geometry: point
                - not: { location: underground }
                - kind: [false, building, university, college, school, kindergarten]
            any:
                - { $zoom: [16], area: { min: 5000 }, name: true }
                - { $zoom: [16], area: { min: 5000 }, kind: true }
                - { $zoom: [16], area: { min: 10000 }, landuse_kind: true }
                - { $zoom: [16], area: { min: 7000 }, kind: [university, college, school, kindergarten] }
                - { $zoom: [16], volume: { min: 50000 }, name: true }
                - { $zoom: [17], area: { min: 3000 }, name: true }
                - { $zoom: [17], area: { min: 2000 }, kind: [university, college, school, kindergarten] }
                - { $zoom: [18], area: { min: 1000 }, name: true }
                - { $zoom: [18], kind: [university, college, school, kindergarten] }
                - { $zoom: [19], area: { min: 200 }, name: true }
                - { $zoom: { min: 19 }, kind: [university, college, school, kindergarten] }
                - { $zoom: { min: 20 }, name: true }
        draw:
            text-blend-order:
                interactive: true
                text_source: global.ux_language_text_source_building_and_address
                move_into_tile: true
                priority: 51
                order: 7
                visible: global.text_visible_building
                font:
                    fill: [0.300,0.300,0.300]
                    family: global.text_font_family
                    style: italic
                    size: 11px
                    stroke: { color: global.building2, width: 4 }
        building_labels-z15-z16:
            filter: { $zoom: [15,16] }
            draw: { text-blend-order: { font: { size: 9px, stroke: { width: 3 } } } }
        building_labels-z17-z18:
            filter: { $zoom: [17,18] }
            draw: { text-blend-order: { font: { size: 11px, stroke: { width: 3 } } } }
        building_labels-z19-up:
            filter: { $zoom: [19,20] }
            draw: { text-blend-order: { font: { size: 12px, stroke: { width: 3 }  } } }
        building-labels-z16:
            filter: function() { if( $zoom == 16 && feature.name.length > 20 ) { return true; } else { return false; } }
            draw:
                text-blend-order:
                    visible: false
        building-labels-z17:
            filter: function() { if( $zoom == 17 && feature.name.length > 30 ) { return true; } else { return false; } }
            draw:
                text-blend-order:
                    visible: false
        building-labels-z20+:
            filter: { $zoom: { min: 20 } }
            draw:
                text-blend-order:
                    text_source: function() { if( feature.addr_housenumber ) { return feature.name + '\n' + feature.addr_housenumber; } else { return feature.name; } }
    address-labels:
        data: { source: mapzen, layer: buildings }
        filter:
            $zoom: { min: 20 }
            any:
                - kind: address
                - { label_position: true, addr_housenumber: true, name: false }
        draw:
            text-blend-order:
                interactive: true
                order: 7
                visible: global.text_visible_address
                text_source: addr_housenumber
                font:
                    fill: global.text_fill_address
                    family: global.text_font_family
                    style: italic
                    size: 11px
                    stroke: { color: global.text_stroke_address, width: 4 }

    boundaries:
        data: { source: mapzen, layer: boundaries }
        # country subdivisions (states, provinces)
        draw:
            lines:
                interactive: true
                order: global.feature_order
#                color: red
#                width: [[9, 1px], [14, 2px], [16, 3px], [17, 8m]]
        country:
            filter:
                kind: country
            draw:
                country-outerline:
                    style: lines
                    order: function() { return (feature.sort_rank -1); }
                    color: [[0, [0.70,0.70,0.70]], [6, [0.815,0.815,0.815]]]
                    width: [[0, 0.5px], [2, 0.75px], [5, 1.7px], [6, 3.5px], [7, 4px], [9, 5px], [14, 7px], [16, 8px], [17, 14m]]
                lines:
                    interactive: true
                    color: [1.0,1.0,1.0]
                    width: [[0, 0px], [5, 0px], [6, 1px], [7, 1px], [9, 1px]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    country-outerline:
                        visible: false
                    lines:
                        visible: false

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                dashed:
                    order: global.feature_order
                    color: global.country_boundary
                    width: [[1, 0.2px], [2, 0.5px], [4, 1.0px], [9, 1.5px], [14, 2.5px], [16, 3.5px], [17, 10m]]

        region:
            filter:
                kind: region
            draw:
                lines:
                    interactive: true
                    color: global.region_boundary
                    width: [[0, 0.5px], [5, 0.5px], [9, 3.5px], [14, 5.5px], [16, 6.5px], [17, 16m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false

#        subregions:
#            filter: { kind: county, $zoom: { min: 10 } }
#            draw:
#                lines:
#                    interactive: true
#                    order: 6
#                    color: global.subregion_boundary
#                    width: [[9, 1px], [14, 2px], [16, 3px], [17, 8m]]

        # city_walls:
        #     filter: { kind: city_wall }
        #     draw:
        #         lines:
        #             interactive: true
        #             order: 8
        #             color: global.city_wall
        #             width: [[12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.0px], [16, 2.5px], [19, 6m]]
        retaining_wall:
            filter: { kind: retaining_wall }
            draw:
                lines:
                    interactive: true
                    color: [0.90,0.90,0.90] # global.retaining_wall
                    width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 4m]]
        # snow_fence:
        #     filter: { kind: snow_fence }
        #     draw:
        #         lines:
        #             interactive: true
        #             order: 8
        #             color: [1.0,0.0,0.0] # global.snow_fence
        #             width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 4m]]

        fence:
            filter: { kind: fence }
            draw:
                lines:
                    interactive: true
                    color: [1.0,1.0,1.0]
                    width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 1m]]

    places:
        data: { source: mapzen, layer: places }
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                text_source: global.ux_language_text_source
                font:
                    family: global.text_font_family
                    # weight: 500
                    fill: global.text_fill
        country-z2:
            filter:
                all:
                    - kind: [country]
                    - $zoom: [2]
                    - name: ["United States of America","Brasil","中华人民共和国","Россия","Canada","Kalaallit Nunaat","Ísland","Australia","India","日本","Guam","Indonesia","South Africa","مصر","Nigeria","Kenya"]
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    text_source: function() { return feature["name:en"] || feature["name"]; }
                    font:
                        fill: global.text_fill
                        weight: 200
                        size: 11px
                        stroke: { color: global.text_stroke, width: 4 }
        country-z3:
            filter: { name: true, population: true, kind: [country], $zoom: [3] }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    text_source: function() { return feature["name:en"] || feature["name"]; }
                    font:
                        fill: global.text_fill
                        weight: 200
                        size: 11px
                        stroke: { color: global.text_stroke, width: 4 }
    #            icons:
    #                size: [[13, 12px], [15, 18px]]
    #                interactive: true
    #                sprite: global.townspot_sprite
            early-ones:
                # US, Brazil, China, Russia, Canada, Greenland, Iceland, Australia, India, Japan, Guam, Indonesia, South Africa, Egypt, Nigeria, Kenya
                filter: { not: { name: ["United States of America","Brasil","中华人民共和国","Россия","Canada","Kalaallit Nunaat","Ísland","Australia","India","日本","Guam","Indonesia","South Africa","مصر","Nigeria","Kenya"] }, $zoom: {min: 3, max: 4} }
                draw:
                    text-blend-order:
                        visible: false
        country-z4:
            filter: { name: true, population: true, kind: [country], $zoom: [4] }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    text_source: function() { return feature["name:en"] || feature["name"]; }
                    font:
                        fill: global.text_fill
                        weight: 200
                        size: 13px
                        stroke: { color: global.text_stroke, width: 4 }
    #            icons:
    #                size: [[13, 12px], [15, 18px]]
    #                interactive: true
    #                sprite: global.townspot_sprite
            early-ones-z4:
                filter: { name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien], $zoom: {min: 4, max: 5} }
                draw:
                    text-blend-order:
                        visible: false
        country-z5:
            filter:
                all:
                    - name: true
                    - population: true
                    - kind: [country]
                    - $zoom: [5]
                any:
                    - { population: { min: 5000000 } }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    text_source: function() { return feature["name:en"] || feature["name"]; }
                    font:
                        fill: global.text_fill
                        weight: 600
                        size: 13px
                        stroke: { color: global.text_stroke, width: 4 }
            # country-spacer-z5:
            #     filter: { kind: country, $zoom: [5] }
            #     draw:
            #         text-blend-order:
            #             text_source: function() { return feature.name.split('').join(' ') }
            #             text_wrap: false
    #            icons:
    #                size: [[13, 12px], [15, 18px]]
    #                interactive: true
    #                sprite: global.townspot_sprite
            early-ones-z5:
                filter: { name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,El Salvador,Belize,België - Belgique - Belgien], $zoom: {min: 5, max: 6} }
                draw:
                    text-blend-order:
                        visible: false
        country-z6:
            # South Ossetia and Abkhazia aren't countries (they are disputed areas)
            filter: { name: true, kind: [country], $zoom: [6] }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    text_source: function() { return feature["name:en"] || feature["name"]; }
                    font:
                        size: 14px
                        weight: 600
                        fill: global.text_fill
                        stroke: { color: global.text_stroke, width: 4 }
            small-ones-z6:
                filter: { name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,België - Belgique - Belgien,Хуссар Ирыстон,Аҧсны - Абхазия], $zoom: {min: 6, max: 7} }
                draw:
                    text-blend-order:
                        visible: false
        country-z7:
            # South Ossetia and Abkhazia aren't countries (they are disputed areas)
            filter: { name: true, kind: [country], $zoom: { min: 7, max: 9 } }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    text_source: function() { return feature["name:en"] || feature["name"]; }
                    font:
                        size: 16px
                        weight: 600
                        fill: global.text_fill
                        stroke: { color: global.text_stroke, width: 4 }
            small-ones-z7:
                filter: { name: [Liechtenstein,San Marino,Civitatis Vaticanæ,Хуссар Ирыстон,Аҧсны - Абхазия], $zoom: {min: 7, max: 8} }
                draw:
                    text-blend-order:
                        visible: false

        region-z4:
            filter: { name: true, kind: [region], $zoom: [4], not: { name: ["Western Cape","Eastern Cape","Northern Cape","North West","Limpopo","KwaZulu-Natal","Hamburg","Freie und Hansestadt Hamburg","Neuchâtel","Nordrhein-Westfalen","Haute-Normandie","Baden-Württemberg","Bayern","Sachsen-Anhalt","Berlin","Mecklenburg-Vorpommern","Schleswig-Holstein","Brandenburg","Niedersachsen","Saarland","Thüringen","Hessen","Sachsen"] } }
            draw:
                text-blend-order:
                    priority: 14
                    visible: global.text_visible_admin
                    text_source: global.ux_language_text_source_short
                    font:
                        size: 11px
                        weight: 400
                        fill: [0.70,0.70,0.70]
                        stroke: { color: global.text_stroke, width: 4 }

        region-z5:
            filter: { name: true, kind: [region], $zoom: [5], not: { name: ["Western Cape","Eastern Cape","Northern Cape","North West","Limpopo","KwaZulu-Natal","Hamburg","Freie und Hansestadt Hamburg","Neuchâtel","Nordrhein-Westfalen","Haute-Normandie","Baden-Württemberg","Bayern","Sachsen-Anhalt","Berlin","Mecklenburg-Vorpommern","Schleswig-Holstein","Brandenburg","Niedersachsen","Saarland","Thüringen","Hessen","Sachsen"] } }
            draw:
                text-blend-order:
                    priority: 14
                    visible: global.text_visible_admin
                    text_source: global.ux_language_text_source_short
                    font:
                        size: 18px
                        weight: 200
                        fill: [0.5,0.5,0.5,0.5]
                        stroke: { color: global.text_stroke, width: 4 }

        region-z6:
            filter: { name: true, kind: [region], $zoom: [6], not: { name: ["Western Cape","Eastern Cape","Northern Cape","North West","Limpopo","KwaZulu-Natal","Hamburg","Freie und Hansestadt Hamburg","Neuchâtel","Nordrhein-Westfalen","Haute-Normandie","Baden-Württemberg","Bayern","Sachsen-Anhalt","Berlin","Mecklenburg-Vorpommern","Schleswig-Holstein","Brandenburg","Niedersachsen","Saarland","Thüringen","Hessen","Sachsen"] } }
            draw:
                text-blend-order:
                    priority: 14
                    visible: global.text_visible_admin
                    text_source: global.ux_language_text_source_short
                    font:
                        size: 21px
                        weight: 200
                        fill: [0.5,0.5,0.5,0.5]
                        # stroke: { color: global.text_stroke, width: 4 }
                        transform: uppercase

        region:
            filter: { name: true, kind: [region], $zoom: {min: 7, max: 9} }
            draw:
                text-blend-order:
                    priority: 14
                    visible: global.text_visible_admin
                    text_source: global.ux_language_text_source_short_proxy_name
                    font:
                        size: 30px
                        weight: 200
                        fill: [0.5,0.5,0.5,0.5]
                        # stroke: { color: global.text_stroke, width: 4 }
                        transform: uppercase
    #            icons:
    #                size: [[13, 12px], [15, 18px]]
    #                interactive: true
    #                sprite: global.townspot_sprite
            pesky:
                filter: { name: ["Western Cape","Eastern Cape","Northern Cape","North West","Limpopo","KwaZulu-Natal","Hamburg","Freie und Hansestadt Hamburg","Neuchâtel","Nordrhein-Westfalen","Haute-Normandie","Baden-Württemberg","Bayern","Sachsen-Anhalt","Berlin","Mecklenburg-Vorpommern","Schleswig-Holstein","Brandenburg","Niedersachsen","Saarland","Thüringen","Hessen","Sachsen"], $zoom: {min: 7, max: 8} }
                draw:
                    text-blend-order:
                        visible: false
            small-ones:
                filter: { name: ["Delaware","New Jersey","Connecticut","Rhode Island","Massachusetts","New Hampshire","Vermont"], $zoom: {min: 7, max: 8} }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_abbreviation
                        font: { transform: uppercase }

        populated-places:
            filter:
                kind: locality
                name: true
            draw:
                icons:
                    interactive: true
                    priority: 5
                    text:
                        buffer: 3px
                        font:
                            fill: global.text_fill
                text-blend-order:
                    interactive: true
                    text:
                        fill: global.text_fill

            populated-places-natural-earth-z2:
                filter: { $zoom: [2], min_zoom: 2 }
                draw:
                    icons:
                        size: 5px
                        visible: global.icon_visible_populated_places
                        sprite: townspot-s-rev
                        text:
                            visible: global.text_visible_populated_places
                            font:
                                size: 10px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z3:
                filter: { $zoom: [3] }
                z3places-1:
                    filter: { min_zoom: 2 }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 11px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                z3places-2:
                    filter: { min_zoom: 3 }
                    draw:
                        icons:
                            priority: 7
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 9px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z4:
                filter: { $zoom: [4] }
                z4places-1:
                    filter: { min_zoom: 2 }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 11px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }

                z4places-2:
                    filter: { min_zoom: [3,4] }
                    draw:
                        icons:
                            priority: 7
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 9px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z5:
                filter: { $zoom: [5] }
                z5places-1:
                    filter: { min_zoom: [2,3] }
                    draw:
                        icons:
                            priority: 7
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 15px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                priority: 5
                                size: 8px
                                sprite: capital-l


                z5places-2:
                    filter: { min_zoom: 4 }
                    draw:
                        icons:
                            priority: 11
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                priority: 9
                                size: 6px
                                sprite: capital-m

                z5places-3:
                    filter: { min_zoom: 5 }
                    draw:
                        icons:
                            priority: 17
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                priority: 15
                                size: 6px
                                sprite: capital-m

            populated-places-natural-earth-z6:
                filter: { $zoom: [6] }
                z6places-1:
                    filter: { min_zoom: [2,3] }
                    draw:
                        icons:
                            priority: 7
                            size: 8px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-l-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 16px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-l
                                size: 8px
                                priority: 5

                z6places-2:
                    filter: { min_zoom: [4,5] }
                    draw:
                        icons:
                            priority: 11
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 13px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 6px
                                sprite: capital-m
                                priority: 9

                z6places-3:
                    filter: { min_zoom: 6 }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 15
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 11px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 6px
                                sprite: capital-m
                                priority: 13

            populated-places-natural-earth-z7:
                filter: { $zoom: [7] }
                z7places-1:
                    filter: { min_zoom: [2,3] }
                    draw:
                        icons:
                            size: 8px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-l-rev
                            priority: 7
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 17px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 8px
                                sprite: capital-l
                                priority: 5

                z7places-2:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 13
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 8px
                                sprite: capital-l
                                priority: 11

                z7places-3:
                    filter: { min_zoom: [6,7] }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 17
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 6px
                                sprite: capital-m
                                priority: 15

            populated-places-osm-z8:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: true
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [8]

                z8places-1:
                    filter:
                        any:
                            - { population: { min: 1000000 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 7
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 17px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 8px
                                sprite: capital-l
                                priority: 5
                z8places-2:
                    filter:
                        any:
                            - { population: { min: 150000, max: 999999 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 11
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 6px
                                sprite: capital-m
                                priority: 9

                z8places-3:
                    filter:
                        any:
                            - { population: { min: 85000, max: 149999 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 15
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 6px
                                sprite: capital-m
                                priority: 13

                z8places-4:
                    filter:
                        any:
                            - { population: { min: 50000, max: 84999 } }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 19
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 5px
                                sprite: capital-m
                                priority: 17
                z8places-5:
                    filter:
                        all:
                            - { population: { max: 50000 } }
                        any:
                            - { country_capital: true }
                            - { region_capital: true }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 19
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 5px
                                sprite: capital-s
                                priority: 17

            populated-places-natural-earth-z8-backfill:
                filter: { name: true, source: naturalearthdata.com, $zoom: [8], population: { max: 50000 } }
                draw: { icons: { text: { font: { fill: global.text_fill } } } }
                z8places-1-ne:
                    filter: { min_zoom: [2,3] }
                    draw:
                        icons:
                            size: 8px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-l-rev
                            priority: 23
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 17px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 8px
                                sprite: capital-l
                                priority: 21

                z8places-2-ne:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-m

                z8places-3-ne:
                    filter: { min_zoom: [6,7] }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 27
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-s
                                priority: 25

            populated-places-osm-z9:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: true
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [9]

                z9places-1:
                    filter:
                        any:
                            - { population: { min: 1000000 } }
                    draw:
                        text:
                            anchor: center
                            visible: global.text_visible_populated_places
                            priority: 6
                            font:
                                size: 17px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z9places-2a:
                    filter:
                        any:
                            - { population: { min: 350000, max: 999999 } }
                    draw:
                        text:
                            anchor: center
                            visible: global.text_visible_populated_places
                            priority: 8
                            font:
                                size: 14px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z9places-2b:
                    filter:
                        any:
                            - { population: { min: 150000, max: 350000 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 11
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-m
                                priority: 9

                z9places-3:
                    filter:
                        any:
                            - { population: { min: 85000, max: 149999 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 15
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-m
                                priority: 13
                                text:
                                    font:
                                        size: 14px

                z9places-4:
                    filter:
                        any:
                            - { population: { min: 50000, max: 84999 } }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 19
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-s
                                priority: 17
                z9places-5:
                    filter:
                        all:
                            - { population: { max: 50000 } }
                        any:
                            - { country_capital: true }
                            - { region_capital: true }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 19
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-s
                                priority: 17

            populated-places-osm-z9-no-population:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: false
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [9]
                        - kind_detail: [city,town]
                draw:
                    icons:
                        size: 5px
                        visible: global.icon_visible_populated_places
                        sprite: townspot-s-rev
                        priority: 21
                        text:
                            # anchor: center
                            visible: global.text_visible_populated_places
                            font:
                                size: 10px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z9-backfill:
                filter: { name: true, source: naturalearthdata.com, $zoom: [9], population: { max: 50000 } }
                draw: { icons: { text: { font: { fill: global.text_fill } } } }
                z9places-1-ne:
                    filter: { min_zoom: [2,3] }
                    draw:
                        icons:
                            size: 8px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-l-rev
                            priority: 25
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 17px
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-l
                                priority: 23

                z9places-2-ne:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 29
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-m
                                priority: 28

                z9places-3-ne:
                    filter: { min_zoom: [6,7,9] }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 33
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-m
                                priority: 31

            populated-places-osm-z10:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: true
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [10]

                z10places-1:
                    filter:
                        any:
                            - { population: { min: 1000000 } }
                    draw:
                        text:
                            anchor: center
                            visible: global.text_visible_populated_places
                            priority: 5
                            font:
                                size: 17px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z10places-2a:
                    filter:
                        any:
                            - { population: { min: 350000, max: 1000000 } }
                    draw:
                        text:
                            anchor: center
                            visible: global.text_visible_populated_places
                            priority: 6
                            font:
                                size: 14px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z10places-2b:
                    filter:
                        any:
                            - { population: { min: 150000, max: 350000 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 7
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }

                z10places-3:
                    filter:
                        any:
                            - { population: { min: 50000, max: 149999 } }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 11
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }

                z10places-4:
                    filter:
                        any:
                            - { population: { min: 20000, max: 49999 } }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 13
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 10px
                                    fill: global.text_fill
                                    stroke: { color: global.text_stroke, width: 4 }

            populated-places-osm-z10-no-population:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: false
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [10]
                        - kind_detail: [city,town]
                draw:
                    icons:
                        size: 5px
                        visible: global.icon_visible_populated_places
                        sprite: townspot-s-rev
                        priority: 15
                        text:
                            # anchor: center
                            visible: global.text_visible_populated_places
                            font:
                                size: 10px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z10-backfill:
                filter: { name: true, source: naturalearthdata.com, $zoom: [10], population: { max: 20000 } }
                draw: { icons: { text: { font: { fill: global.text_fill } } } }
                z10places-1-ne:
                    filter: { min_zoom: [2,3] }
                    draw:
                        text:
                            visible: global.text_visible_populated_places
                            offset: [0, 2px] # half icon size
                            priority: 17
                            font:
                                size: 17px
                                stroke: { color: global.text_stroke, width: 4 }

                z10places-2-ne:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        icons:
                            size: 6px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-m-rev
                            priority: 21
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 14px
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                sprite: capital-m
                                priority: 20

                z10places-3-ne:
                    filter: { min_zoom: [6,7,9,10] }
                    draw:
                        icons:
                            size: 5px
                            visible: global.icon_visible_populated_places
                            sprite: townspot-s-rev
                            priority: 25
                            text:
                                visible: global.text_visible_populated_places
                                font:
                                    size: 12px
                                    stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            icons:
                                size: 7px
                                sprite: capital-m
                                priority: 23

            populated-places-osm-z11:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: true
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [11]
                        - kind_detail: [city,town]
                draw:
                    text-blend-order:
                        anchor: center

                z11places-1:
                    filter:
                        any:
                            - { population: { min: 1000000 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 5
                            font:
                                size: 18px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z11places-2:
                    filter:
                        any:
                            - { population: { min: 50000, max: 999999 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 6
                            font:
                                size: 14px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z11places-3:
                    filter:
                        any:
                        - { population: { min: 5000, max: 49999 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 7
                            font:
                                size: 11px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

            populated-places-osm-z11-no-population:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: false
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [11]
                        - kind_detail: [city,town]
                draw:
                    text-blend-order:
                        anchor: center
                        visible: global.text_visible_populated_places
                        priority: 8
                        font:
                            size: 11px
                            fill: global.text_fill
                            stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z11-backfill:
                filter: { name: true, source: naturalearthdata.com, $zoom: [11], population: { max: 5000 } }
                draw:
                    text-blend-order:
                        anchor: center
                        font:
                            fill: global.text_fill
                z11places-1-ne:
                    filter: { min_zoom: [2,3] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 10
                            font:
                                size: 18px
                                stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            text-blend-order:
                                priority: 9
                                font:
                                    size: 18px
                                    stroke: { color: global.text_stroke, width: 4 }

                z11places-2-ne:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 13
                            font:
                                size: 14px
                                stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            text-blend-order:
                                priority: 11
                                font:
                                    size: 14px
                                    stroke: { color: global.text_stroke, width: 4 }
                    state_capital:
                        filter: { region_capital: true }
                        draw:
                            text-blend-order:
                                priority: 12
                                font:
                                    size: 14px
                                    stroke: { color: global.text_stroke, width: 4 }

                z11places-3-ne:
                    filter: { min_zoom: [6,7,9,10] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 15
                            font:
                                size: 11px
                                stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            text-blend-order:
                                priority: 14
                                font:
                                    size: 11px
                                    stroke: { color: global.text_stroke, width: 4 }

            populated-places-osm-z12:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: true
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [12]
                        - kind_detail: [city,town]
                draw:
                    text-blend-order:
                        anchor: center

                z12places-1:
                    filter:
                        any:
                            - { population: { min: 1000000 } }

                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 5
                            font:
                                size: 18px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z12places-2:
                    filter:
                        any:
                            - { population: { min: 50000, max: 999999 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 6
                            font:
                                size: 14px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z12places-3:
                    filter:
                        any:
                        - { population: { min: 5000, max: 49999 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 7
                            font:
                                size: 11px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

                z12places-4:
                    filter:
                        any:
                        - { population: { max: 5000 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 8
                            font:
                                size: 11px
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4 }

            populated-places-osm-z12-no-population:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: false
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [12]
                        - kind_detail: [city,town]
                draw:
                    text-blend-order:
                        anchor: center
                        visible: global.text_visible_populated_places
                        priority: 9
                        font:
                            size: 11px
                            fill: global.text_fill
                            stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z12-backfill:
                filter: { name: true, source: naturalearthdata.com, $zoom: [12], population: { max: 5000 } }
                draw:
                    text-blend-order:
                        anchor: center
                        priority: 10
                        font:
                            fill: global.text_fill

                z12places-1-ne:
                    filter: { min_zoom: [2,3] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 12
                            font:
                                size: 18px
                                stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            text-blend-order:
                                priority: 11
                                font:
                                    size: 18px
                                    stroke: { color: global.text_stroke, width: 4 }

                z12places-2-ne:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 14
                            font:
                                size: 14px
                                stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            text-blend-order:
                                priority: 13
                                font:
                                    size: 14px
                                    stroke: { color: global.text_stroke, width: 4 }

                z12places-3-ne:
                    filter: { min_zoom: [6,7,9,10] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 16
                            font:
                                size: 11px
                                stroke: { color: global.text_stroke, width: 4 }
                    capital:
                        filter: { country_capital: true }
                        draw:
                            text-blend-order:
                                priority: 15
                                font:
                                    size: 11px
                                    stroke: { color: global.text_stroke, width: 4 }

            populated-places-osm-z13-z14:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: true
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [13,14]
                        - kind_detail: [city,town]
                draw:
                    text-blend-order:
                        anchor: center
                        visible: global.text_visible_populated_places
                        font:
                            weight: 600
                            fill: global.text_fill
                z14:
                    filter:
                        $zoom: [14]
                    draw:
                        text-blend-order:
                            font:
                                weight: 600

                z13places-1:
                    filter:
                        any:
                            - { population: { min: 200000 } }
                    draw:
                        text-blend-order:
                            visible: false

                z13places-2:
                    filter:
                        any:
                            - { population: { min: 50000, max: 199999 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 5
                            font:
                                size: 14px
                                stroke: { color: global.text_stroke, width: 4 }

                z13places-3:
                    filter:
                        any:
                        - { population: { min: 5000, max: 49999 } }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 6
                            font:
                                size: 12px
                                stroke: { color: global.text_stroke, width: 4 }

                z13places-4:
                    filter:
                        any:
                            - population: false
                            - population: true
                              all:
                                - population: { max: 5000 }
                    draw:
                        text-blend-order:
                            font:
                                size: 12px
                                stroke: { color: global.text_stroke, width: 4 }

            populated-places-osm-z13-z14-no-population:
                filter:
                    all:
                        - source: [openstreetmap, openstreetmap.org]
                        - name: true
                        - population: false
                        - not: { kind: [country, county, state, island, neighbourhood, suburb, quarter] }
                        - $zoom: [13, 14]
                        - kind_detail: [city,town]
                draw:
                    text-blend-order:
                        anchor: center
                        visible: global.text_visible_populated_places
                        priority: 7
                        font:
                            size: 11px
                            stroke: { color: global.text_stroke, width: 4 }

            populated-places-natural-earth-z13-z14-backfill:
                filter: { name: true, source: naturalearthdata.com, $zoom: [13,14], population: { max: 5000 } }
                draw:
                    text-blend-order:
                        anchor: center
                        font:
                            fill: global.text_fill
                            weight: 400

                z13places-1-ne:
                    filter: { min_zoom: [2,3] }
                    draw:
                        text-blend-order:
                            priority: 8
                            interactive: false
                            visible: false

                z13places-2-ne:
                    filter: { min_zoom: [4,5,6] }
                    draw:
                        text-blend-order:
                            priority: 9
                            visible: global.text_visible_populated_places
                            font:
                                size: 13px
                                stroke: { color: global.text_stroke, width: 4 }

                z13places-3-ne:
                    filter: { min_zoom: [6,7,9,10] }
                    draw:
                        text-blend-order:
                            visible: global.text_visible_populated_places
                            priority: 10
                            font:
                                size: 12px
                                stroke: { color: global.text_stroke, width: 4 }
        neighbourhoods:
            filter:
                kind: [macrohood, neighbourhood]
            neighborhood-z11:
                filter:
                    all:
                        - $zoom: [11]
                        - min_zoom: [11]
                        - max_zoom: { min: 12 }
                        - is_landuse_aoi: false
                        #- kind_tile_rank: { max: 6 }
                draw:
                    text-blend-order:
                        priority: 18
                        text_wrap: 10
                        visible: global.text_visible_neighbourhoods_e
                        font:
                            size: 9px
                            weight: 400
                            fill: [0.600,0.600,0.600]
                            transform: uppercase
                            stroke: { color: [1.0,1.0,1.0,0.7], width: 4 }
            neighborhood-z12:
                filter:
                    all:
                        - $zoom: [12]
                        - min_zoom: [11,12]
                        - max_zoom: { min: 13 }
                        - is_landuse_aoi: false
                        #- kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        priority: 18
                        text_wrap: 10
                        visible: global.text_visible_neighbourhoods_e
                        font:
                            size: 10px
                            weight: 400
                            fill: [0.600,0.600,0.600]
                            transform: uppercase
                            stroke: { color: [1.0,1.0,1.0,0.7], width: 4 }
            neighborhood-z13:
                filter:
                    all:
                        - $zoom: [13]
                        - min_zoom: [11,12,13]
                        - max_zoom: { min: 14 }
                        - is_landuse_aoi: false
                        - kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        priority: 18
                        text_wrap: 10
                        visible: global.text_visible_neighbourhoods_e
                        font:
                            size: 12px
                            weight: 300
                            fill: [0.620,0.620,0.620]
                            transform: uppercase
                            stroke: { color: [1.0,1.0,1.0,0.7], width: 6 }
            neighborhood-z14:
                filter:
                    all:
                        - $zoom: [14]
                        - min_zoom: [11,12,13,14]
                        - max_zoom: { min: 15 }
                        - is_landuse_aoi: false
                        - kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        priority: 18
                        text_wrap: 12
                        visible: global.text_visible_neighbourhoods
                        font:
                            size: 16px
                            weight: 200
                            fill: [0.600,0.600,0.600]
                            transform: uppercase
                            stroke: { color: [1.0,1.0,1.0,0.7], width: 6 }
            neighborhood-z15:
                filter:
                    all:
                        - $zoom: [15]
                        - min_zoom: [11,12,13,14,15]
                        - max_zoom: { min: 16 }
                        - is_landuse_aoi: false
                        - kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        priority: 18
                        text_wrap: 12
                        visible: global.text_visible_neighbourhoods
                        font:
                            size: 21px
                            weight: 200
                            fill: [0.650,0.650,0.650]
                            transform: uppercase
                            stroke: { color: [1.0,1.0,1.0,0.6], width: 8 }
                z15-new:
                    filter:
                        all:
                            - min_zoom: 15
                    draw:
                        text-blend-order:
                            priority: 19
                            font:
                                size: 13px
            neighborhood-z16:
                filter:
                    all:
                        - $zoom: [16]
                        - min_zoom: [11,12,13,14,15,16]
                        - max_zoom: { min: 17 }
                        - is_landuse_aoi: false
                        - kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        priority: 18
                        visible: global.text_visible_neighbourhoods
                        font:
                            size: 24px
                            weight: 300
                            fill: [0.00,0.00,0.00,0.50]
                            transform: uppercase
                            stroke: { color: [1.0,1.0,1.0,0.85], width: 4 }

    pois_and_landuse_labels:
        data: { source: mapzen, layer: [pois] }
        filter:
            all:
                - not: { kind: [building,address,farm,tree,apron,residential,commercial,industrial] }
                - $geometry: point
                # White list a few kinds to "always" show per the tile zoom inclusion, else test feature's min_zoom
                #- function() { return feature.min_zoom <= $zoom }
                - function() { if( feature.kind == 'restaurant' || feature.kind == 'landmark' || feature.kind == 'cafe' ) { return true } else { return feature.min_zoom <= $zoom } }
                - any:
                    - area: false
                      all:
                          - $zoom: { min: 12 }
                    - area: true
                      all:
                          - kind: true
        draw:
            icons:
                size: [[13, 16px], [16, 16px], [18, 18px]]
                interactive: true
                visible: global.label_visible_poi_landuse
                priority: 65
                text:
                    visible: global.text_visible_poi_landuse    # labels are enabled by each layer below
                    text_source: global.ux_language_text_source
                    move_into_tile: false # preserves text alignment w/icons in JS
                    interactive: true
                    buffer: 7px
                    font:
                        family: global.text_font_family
                        weight: 400
                        fill: [0.350,0.350,0.350]
                        size: 8px
                        stroke: { color: global.text_stroke, width: 3 }
        poi_labels-z12-z13:
            filter: { $zoom: [12,13] }
            draw: { icons: { text: { font: { size: 10px } } } }
        poi_labels-z14:
            filter: { $zoom: [14] }
            draw: { icons: { text: { font: { size: 10.5px } } } }
        poi_labels-z15:
            filter: { $zoom: [15,16,17] }
            draw: { icons: { text: { font: { size: 12px, stroke: { width: 2 } } } } }
        poi_labels-z18:
            filter: { $zoom: [18,19] }
            draw: { icons: { text: { font: { size: 12px, weight: 600, stroke: { width: 3 } } } } }
        poi_labels-z20-up:
            filter: { $zoom: { min: 20 } }
            draw: { icons: { text: { font: { size: 14px, weight: 600, stroke: { width: 3 } } } } }

#
# HERE BEGINS "no label" version, commment it all out for no labels for POIS
#

        no-name:
            filter: { name: false }
            highway-exit:
                filter: { kind: motorway_junction, $zoom: { min: 14 } }
                draw:
                    icons:
                        visible: false
                    text-blend-order:
                        visible: global.text_visible_exits
                        interactive: true
                        text_source: ref
                        priority: 52
                        font:
                            fill: [1.0,1.0,1.0] # global.text_fill_exits
                            size: [[12,9px],[15,10px],[17,12px]]
                            stroke: { color: [0.25,0.25,0.25], width: [[14,3px],[15,4px]] }
                later:
                    filter: { $zoom: { min: 16 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
            airport-gate:
                filter: { kind: aeroway_gate }
                draw:
                    icons:
                        visible: false
                    text-blend-order:
                        visible: global.text_visible_airport_gate
                        interactive: true
                        text_source: ref
                        font:
                            fill: [0.50,0.50,0.50]
                            size: [[16,9px],[17,12px],[20,14px]]
                            #stroke: { color: [1.0,1.0,1.0], width: 4px }
                later:
                    filter: { $zoom: { min: 19 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
            toilets:
                filter: { kind: toilets, $zoom: { min: 18 }  }
                draw: { icons: { sprite: toilets, visible: global.icon_visible_poi_landuse_e } }
            playground:
                filter: { kind: playground, $zoom: { min: 18 }  }
                draw: { icons: { sprite: playground, visible: global.icon_visible_poi_landuse_e } }
            picnic_site:
                filter: { kind: picnic_site, $zoom: { min: 18 }  }
                draw: { icons: { sprite: picnic_site, visible: global.icon_visible_poi_landuse_e } }
            information:
                filter: { kind: information, $zoom: { min: 18 }  }
                draw: { icons: { sprite: information, visible: global.icon_visible_poi_landuse_e } }
            drinking_water:
                filter: { kind: drinking_water, $zoom: { min: 18 }  }
                draw: { icons: { sprite: drinking_water, visible: global.icon_visible_poi_landuse_e } }
            traffic_signals:
                filter: { kind: traffic_signals, $zoom: { min: 18 } }
                draw:   { icons: { sprite: traffic_signals, visible: global.icon_visible_poi_landuse_e } }
            bicycle_parking:
                filter: { kind: [bicycle_parking], $zoom: { min: 19 } }
                draw:   { icons: { sprite: bicycle_parking, visible: global.icon_visible_poi_landuse_e } }
            parking:
                filter: { kind: [parking], $zoom: { min: 17 } }
                draw:   { icons: { sprite: parking, visible: global.icon_visible_poi_landuse_e } }

            sports-pitch:
                filter: { kind: [grass, pitch], $geometry: point, area: true, $zoom: { min: 16 } }
                draw:
                    icons:
                        sprite: function() { return feature.kind_detail }
                        visible: global.icon_visible_poi_landuse_e
                        priority: 49
                baseball:
                    filter: { kind_detail: baseball }
                    draw: { icons: { sprite: baseball } }
                basketball:
                    filter: { kind_detail: basketball }
                    draw: { icons: { sprite: basketball } }
                football:
                    filter: { kind_detail: football }
                    draw: { icons: { sprite: football } }
                hockey:
                    filter: { kind_detail: hockey-field }
                    draw: { icons: { sprite: hockey } }
                soccer:
                    filter: { kind_detail: soccer }
                    draw: { icons: { sprite: soccer } }
                tennis:
                    filter: { kind_detail: tennis }
                    draw: { icons: { sprite: tennis } }


#
# HERE ENDS FIRST "no label" version, commment it all out for no labels for POIS
#

        has-name:
            filter: { name: true }

#
# HERE BEGINS 2nd "no label" version, commment it all out for no labels for POIS
#

            # match 1:1 correlations between data and sprite name
            direct-match:
                filter: { area: false }
                draw:
                    icons:
                        # sprite_source: kind
                        sprite: function() { return feature.kind; }
                        visible: global.icon_visible_poi_landuse

            # add generic icon at high zoom, if direct match fails
            generic-icons:
                filter: { $zoom: { min: 18 }, area: false }
                draw:
                    icons:
                        sprite_default: generic
                        visible: global.icon_visible_poi_landuse
                        priority: 47

            # add generic icon at high zoom
            default-label-names:
                filter: { $zoom: { min: 13 }, area: false }
                draw:
                    icons:
                        text:
                            visible: global.text_visible_poi_landuse
                            priority: 48

#
# HERE ENDS 2nd "no label" version, commment it all out for no labels for POIS
#

            landuse-labels-green-areas-national-park:
                filter:
                    all:
                        - area: true
                        - $geometry: point
                        - kind: [national_park, "park or protected land"]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [4],  area: { min: 3000000000 } }
                        - { $zoom: [5],  area: { min: 3000000000 } }
                        - { $zoom: [6],  area: { min: 500000000 } }
                        - { $zoom: [7,8,9],  area: { min: 100000000 } }
                        - { $zoom: [10], area: { min: 50000000 } }
                        - { $zoom: [11], area: { min: 25000000 } }
                        - { $zoom: [12], area: { min: 5000000 } }
                        - { $zoom: [13], area: { min: 200000 } }
                        - { $zoom: [14], area: { min: 50000 } }
                        - { $zoom: { min: 15 } }
                national-park:
                    # yosemite national park, joshua tree national park
                    filter: function() { return feature.name && feature.name.indexOf("National Park") > -1; }
                    #visible: global.label_visible_landuse_green
                    draw:
                        icons:
                            visible: global.icon_visible_landuse_green
                            sprite: park
                            priority: 41
                            text:
                                visible: global.text_visible_landuse_green
                                font:
                                    fill: [0.350,0.350,0.350]
                                    style: italic
                                    stroke: { color: global.text_stroke_park, width: 4 }
                    natl-park-labels-z4-z5:
                        filter: { $zoom: [4,5] }
                        draw:
                            icons:
                                visible: false
                                text: { font: { size: 9px, stroke: { width: 2px }, fill: [0.60,0.60,0.60] } }
                    natl-park-labels-z6:
                        filter: { $zoom: [6] }
                        draw:
                            icons:
                                text: { font: { size: 9px, stroke: { width: 2px }, fill: [0.40,0.40,0.40] } }
                    natl-park-labels-z7:
                        filter: { $zoom: [7] }
                        draw:
                            icons:
                                text: { font: { size: 10px, stroke: { width: 2px }, fill: [0.350,0.350,0.350] } }
                    natl-park-labels-z8:
                        filter: { $zoom: [8,9] }
                        draw:
                            icons:
                                text: { font: { size: 11px, stroke: { width: 2px }, fill: [0.350,0.350,0.350] } }
                    natl-park-labels-z10:
                        filter: { $zoom: {min: 10, max: 14 } }
                        draw:
                            icons:
                                text: { font: { size: 12px } }

            landuse-labels-green-areas-not-national-park:
                filter:
                    all:
                        - area: true
                        - $geometry: point
                        - kind: [park, conservation, protected_area, nature_reserve, forest, grass]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [5],    area: { min: 10000000000 } }
                        - { $zoom: [6,7],  area: { min: 5000000000 } }
                        - { $zoom: [8],    area: { min: 1000000000 } }
                        - { $zoom: [9],    area: { min: 100000000 } }
                        - { $zoom: [10],   area: { min: 50000000 } }
                        - { $zoom: [11],   area: { min: 25000000 } }
                        - { $zoom: [12],   area: { min: 5000000 } }
                        - { $zoom: [13],   area: { min: 200000 } }
                        - { $zoom: [14],   area: { min: 50000 } }
                        - { $zoom: [15],   area: { min: 10000 } }
                        - { $zoom: [16],   area: { min: 1000 } }
                        - { $zoom: { min: 17 } }
                not-national-park:
                    filter: function() { return !( feature.name.indexOf("National Park") > -1 ); }
                    draw:
                        icons:
                            visible: global.icon_visible_landuse_green
                            sprite: park
                            priority: 41
                            text:
                                visible: global.text_visible_landuse_green
                                font:
                                    fill: [0.350,0.350,0.350]
                                    size: 10px
                                    style: italic
                                    stroke: { color: global.text_stroke_park, width: 3 }
                    green-areas-z6:
                        # mojave national preserve
                        filter: { $zoom: [6] }
                        draw:
                            icons:
                                visible: false
                                text: { font: { size: 10px, stroke: { width: 2px }, fill: [0.40,0.40,0.40] } }
                    green-areas-z7:
                        filter: { $zoom: [7] }
                        draw:
                            icons:
                                visible: false
                                text: { font: { size: 10px, stroke: { width: 2px }, fill: [0.350,0.350,0.350] } }
                    green-areas-z17-up:
                        filter: { $zoom: { min: 17 } }
                        draw:
                            icons:
                                text:
                                    font:
                                        size: 11px
                                        stroke: { color: [1.0,1.0,1.0], width: 4 }

                    wilderness-areas-early:
                       filter: function() { return $zoom < 10 && feature.name && (feature.name.indexOf("Wilderness") > -1 || feature.name.indexOf("BLM") > -1) }
                       draw:
                            icons:
                                visible: false
                                text: { visible: false }
                    early-not-national-park:
                        filter: { not: { kind: national_park }, $zoom: { max: 6 } }
                        draw:
                            icons:
                                visible: false
                                text: { visible: false }
                    not-national-park:
                        filter: function() { return feature.name && feature.name.indexOf("Park") > -1 }
                        # draw:
                        #     icons:
                        #         sprite: park
                        early:
                            filter: { $zoom: { max: 8 } }
                            draw:
                                icons:
                                    visible: false
                                    text: { visible: false }
                    forest-icon:
                        filter: { kind: forest }
                        draw:
                            icons:
                                sprite: forest
                    forest:
                        filter: function() { return $zoom < 8 && ((feature.name && feature.name.indexOf("Forest") > -1) || feature.protect_class >=6) }
                        draw:
                            icons:
                                visible: false
                                text: { visible: false }
                    hide-till-later:
                        filter: { kind: [grass], $zoom: { max: 16 } }
                        draw:
                            icons:
                                visible: false
                                text: { visible: false }
                    only-text-later:
                        filter: { kind: [grass], $zoom: { min: 16 } }
                        draw:
                            icons:
                                visible: false
                                text: { font: { style: italic } }
            beach:
                filter:
                    all:
                        - area: true
                        - $geometry: point
                        - kind: [beach]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [10],   area: { min: 300000 } }
                        - { $zoom: [11],   area: { min: 100000 } }
                        - { $zoom: [12],   area: { min: 50000 } }
                        - { $zoom: [13],   area: { min: 50000 } }
                        - { $zoom: [14],   area: { min: 20000 } }
                        - { $zoom: [15],   area: { min: 10000 } }
                        - { $zoom: [16],   area: { min: 1000 } }
                        - { $zoom: { min: 17 } }
                draw:
                    icons:
                        visible: global.icon_visible_landuse_green
                        interactive: true
                        sprite: beach
                        text:
                            visible: global.text_visible_landuse_green
                            interactive: true
                            font:
                                fill: global.text_fill_beach
            airport:
                filter:
                    all:
                        - kind: [airport, aerodrome]
                        - area: true
                        - $geometry: point
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [9],  area: { min: 10000000 } }
                        - { $zoom: [10], area: { min: 10000000 } }
                        - { $zoom: [11], area: { min: 5000000 } }
                        - { $zoom: [12], area: { min: 5000000 } }
                        - { $zoom: [13], area: { min: 500000 } }
                        - { $zoom: [14], area: { min: 20000 } }
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [15], area: { min: 10000 } }
                        - { $zoom: [16], area: { min: 5000 } }
                        - { $zoom: [17], area: { min: 2000 } }
                        - { $zoom: { min: 18 } }
                draw:
                    icons:
                        sprite: airport
                        visible: global.icon_visible_landuse_green
                        priority: 42
                        text:
                            visible: global.text_visible_landuse_green
                            text_source: global.ux_language_text_source_iata
                            font:
                                fill: global.text_fill
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                early:
                    filter: { $zoom: [9,10,11] }
                    # todo: huh?
                    draw: { icons: { text: { text_source: global.ux_language_text_source_iata, font: { size: 11px } } } }
                early2:
                    filter: { $zoom: { min: 12, max: 14 } }
                    draw: { icons: { text: { font: { size: 11px } } } }
            university:
                filter:
                    all:
                        - kind: [university, college]
                        - area: true
                        - $geometry: point
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [9],   area: { min: 10000000 } }
                        - { $zoom: [10], area: { min: 5000000 } }
                        - { $zoom: [11], area: { min: 2000000 } }
                        - { $zoom: [12], area: { min: 500000 } }
                        - { $zoom: [13], area: { min: 100000 } }
                        - { $zoom: [14], area: { min: 100000 } }
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [15], area: { min: 40000 } }
                        - { $zoom: [16], area: { min: 5000 } }
                        - { $zoom: [17], area: { min: 2000 } }
                        - { $zoom: { min: 18 } }
                #visible: global.label_visible_landuse_green
                draw:
                    icons:
                        sprite: college
                        visible: global.icon_visible_landuse_green
                        priority: 41
                        text:
                            visible: global.text_visible_landuse_green
                            font:
                                fill: [0.350,0.350,0.350]
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                early2:
                    filter: { $zoom: { max: 14 } }
                    draw: { icons: { text: { size: 11px } } }
            school:
                filter:
                    all:
                        - kind: [school, kindergarten]
                        - area: true
                        - $geometry: point
                        - not: { $layer: buildings }
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [13], area: { min: 100000 } }
                        - { $zoom: [14], area: { min: 50000 } }
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [15], area: { min: 10000 } }
                        - { $zoom: [16], area: { min: 5000 } }
                        - { $zoom: [17], area: { min: 2000 } }
                        - { $zoom: { min: 18 }, area: true }
                draw:
                    icons:
                        sprite: school
                        visible: global.icon_visible_landuse_green
                        priority: 41
                        text:
                            visible: global.text_visible_landuse_green
                            font:
                                fill: global.text_fill
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                early:
                    filter: { $zoom: { max: 14 } }
                    draw: { icons: { text: { font: { size: 11px } } } }
            winter_sports:
                filter:
                    all:
                        - kind: winter_sports
                        - area: true
                        - $geometry: point
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [10], area: { min: 5000000 } }
                        - { $zoom: [11], area: { min: 2000000 } }
                        - { $zoom: [12], area: { min: 500000 } }
                        - { $zoom: [13], area: { min: 100000 } }
                        - { $zoom: [14], area: { min: 100000 } }
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [15], area: { min: 40000 } }
                        - { $zoom: [16], area: { min: 5000 } }
                        - { $zoom: [17], area: { min: 2000 } }
                        - { $zoom: { min: 18 } }
                draw:
                    icons:
                        sprite: ski
                        visible: global.icon_visible_landuse_green
                        priority: 41
                        text:
                            visible: global.text_visible_landuse_green
                            font:
                                fill: global.text_fill
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                early:
                    filter: { $zoom: { max: 14 } }
                    draw: { icons: { text: { font: { size: 10px } } } }
            tourism-related:
                filter:
                    all:
                        - kind: [zoo, theme_park, resort, aquarium, winery, maze, stadium, enclosure, animal]
                        - area: true
                        - $geometry: point
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 11 }, area: { min: 400000 } }
                        - { $zoom: { min: 12 }, area: { min: 200000 } }
                        - { $zoom: { min: 13 }, area: { min: 50000 } }
                        - { $zoom: { min: 14 }, area: { min: 20000 } }
                        - { $zoom: { min: 15 }, area: { min: 10000 } }
                        - { $zoom: { min: 15 }, area: { min: 2000 } }
                        - { $zoom: { min: 16 } }
                draw:
                    icons:
                        sprite: function() { return feature.kind; }
                        sprite_default: generic
                        visible: global.icon_visible_poi_landuse
                        priority: 43
                        text:
                            visible: global.text_visible_poi_landuse
                            font:
                                fill: global.text_fill
                                size: 10.5px
                                stroke: { color: global.text_stroke, width: 4 }
                early-sizing:
                    filter: { $zoom: { max: 14 } }
                    draw: { icons: { text: { size: 11px } } }

            landuse-labels-not-green-areas:
                filter:
                    all:
                        - $zoom: { min: 6 }
                        - area: true
                        - $geometry: point
                        - not: { kind: [park, national_park, protected_area, nature_reserve, airport, aerodrome, university, college, school, kindergarten, winter_sports, zoo, theme_park, resort, aquarium, winery, maze, stadium] }
                    # any:
                    #     # show labels for smaller landuse areas at higher zooms
                    #     - { $zoom: [5,6,7], area: { min: 5000000000 } }
                    #     - { $zoom: [8],     area: { min: 1600000000 } }
                    #     - { $zoom: [9],     area: { min: 400000000 } }
                    #     - { $zoom: [10],    area: { min: 100000000 } }
                    #     - { $zoom: [11],    area: { min: 25000000 } }
                    #     - { $zoom: [12],    area: { min: 5000000 } }
                    #     - { $zoom: [13],    area: { min: 1000000 } }
                    #     - { $zoom: [14],    area: { min: 100000 } }
                    #     # show labels for smaller landuse areas at higher zooms
                    #     - { $zoom: [15],    area: { min: 5000 } }
                    #     - { $zoom: [16],    area: { min: 2000 } }
                    #     - { $zoom: { min: 17 } }
                draw:
                    icons:
                        sprite: function() { return feature.kind; }
                        sprite_default: generic
                        visible: global.icon_visible_poi_landuse
                        priority: 43
                        text:
                            visible: global.text_visible_poi_landuse
                            font:
                                fill: [0.50,0.50,0.50]
                                #weight: 600
                                size: 10px
                                stroke: { color: [1.0,1.0,1.0,0.85], width: 3 }
                landuse-z17:
                    filter: { $zoom: { min: 17 } }
                    draw:
                        icons:
                            text:
                                font:
                                    size: 11px
                                    fill: [0.50,0.50,0.50]
                                    stroke: { color: [1.0,1.0,1.0], width: 4 }
                # building-like:
                #     filter: { kind: [commercial,residential,warehouse,public,dormitory], osm_relation: false }
                #     draw:
                #         icons:
                #             sprite: building
                residential-relations-paris-wtf-early:
                    filter: { kind: [residential], osm_relation: true, $zoom: { max: 13 } }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                residential-relations-paris-wtf:
                    filter: { kind: [residential], osm_relation: true, $zoom: { min: 13 } }
                    draw:
                        icons:
                            visible: false
                            text:
                                visible: true
                                text_source: global.ux_language_text_source_short
                hide-till-later:
                    filter: { kind: [pedestrian,common,railway,ship,houseboat,common,grass,wetland,pitch], $zoom: { max: 17 } }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                only-text-later:
                    filter: { kind: [pedestrian,common,railway,ship,houseboat,common,grass,wetland,pitch], $zoom: { min: 17 } }
                    draw:
                        icons:
                            visible: false
                            text: { font: { style: italic } }
                burial_vault-early:
                    filter: { kind: [burial_vault], $zoom: { max: 19 } }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                garden-area-early:
                   filter:
                       all:
                           - kind: [garden, allotments]
                       any:
                           # limit show smaller landuse areas to higher zooms
                           - { $zoom: [12], area: { max: 500000 } }
                           - { $zoom: [13], area: { max: 100000 } }
                           - { $zoom: [14], area: { max: 10000 } }
                           - { $zoom: [15], area: { max: 5000 } }
                   draw:
                       icons:
                           visible: false

            university-poi:
                filter: { kind: [university, college], area: false, $zoom: { max: 16 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            office-early:
                filter:
                    any:
                        - { kind: [insurance, office, company], $zoom: [15], area: { max: 10000 } }
                        - { kind: [insurance, office, company], $zoom: [16], area: { max: 5000 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            bank-early:
                filter: { kind: [bank], $zoom: { max: 17 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            garden-no-area-early2:
                filter: { kind: [garden, allotments], $zoom: { max: 16 }, area: false }
                draw:
                    icons:
                        visible: false
            garden-no-area-early:
                filter: { kind: [garden, allotments], $zoom: [16], area: false }
                draw:
                    icons:
                        priority: 45
                        size: 14px
                        text:  { font: { size: 10px, style: italic } }
            garden-no-area-later:
                filter: { kind: [garden, allotments], $zoom: { min: 17 }, area: false }
                draw:
                    icons:
                        priority: 45
                        size: 16px
                        text:  { font: { size: 11px, style: italic } }
            post-office-early:
                filter: { kind: [post_office], $zoom: { max: 14 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            atm-early:
                filter: { kind: [atm], $zoom: { max: 18 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            bicycle-parking-early:
                filter: { kind: [bicycle_parking], $zoom: { max: 19 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            peak-early:
                filter: { kind: [peak], $zoom: { max: 16 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            drinking-water-early:
                filter: { kind: [drinking_water], $zoom: { max: 18 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            memorial-early:
                filter: { kind: [memorial], $zoom: { max: 13 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            animal-points-early:
                filter: { kind: [animal], area: false, $zoom: { max: 18 } }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
#            animal-areas-early:
#                filter: { kind: [animal], area: { min: 500 }, $zoom: { max: 18 } }
#                draw:
#                    text-blend-order:  { visible: false }
#                    icons: { visible: false }
            parking-labels-early:
                filter:
                    kind: [parking]
                    $zoom: { max: 18 }
                draw:
                    icons:
                        visible: false
                        text: { visible: false }
            parking-labels:
                filter:
                    kind: [parking]
                    $zoom: { min: 18 }
                draw:
                    icons:
                        text:
                            visible: global.text_visible_poi_landuse
                            font:
                                fill: global.text_fill
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
            landuse-funky:
                filter: { kind: [commercial, residential, wood], $zoom: { max: 17 } }
                draw:
                    icons:
                        text:
                            visible: false
            car_sharing:
                filter: { kind: car_sharing }
                icons-early:
                    filter: { $zoom: { max: 17 } }
                    draw:
                        icons:
                            visible: false
                text-labels-early:
                    filter: { $zoom: { max: 19 } }
                    draw:
                        icons:
                            text:
                                visible: false
            tower:
                filter: { kind: [tower], label_placement: true }
                draw:
                    icons:
                        visible: false
                        text:
                            font:
                                style: italic
            station-train-subway:
                filter: { kind: [station, train_station], $zoom: { min: 11 } }
                #visible: global.label_visible_station
                draw:
                    icons:
                        visible: global.icon_visible_station
                        sprite: train_station
                        size: [[13, 12px], [14, 12px], [15, 16px], [17, 18px], [18, 20px]]
                        priority: 41
                        text:
                            visible: global.text_visible_station
                            font:
                                weight: 600
                                fill: [0.20,0.20,0.20]
                                size: 10px
                                stroke: { color: global.text_stroke, width: 4 }
                low-priority-early:
                    filter: { kind_tile_rank: { min: 5 }, $zoom: { min: 0, max: 13 } }
                    draw:
                        icons:
                            visible: false
                            #size: [[12, 10px], [14, 10px], [15, 16px]]
                            text: { visible: false }
                low-priority-early-z13:
                    filter: { kind_tile_rank: { min: 5 }, $zoom: [13] }
                    draw:
                        icons:
                            visible: false
                            #size: [[12, 10px], [14, 10px], [15, 16px]]
                            text: { visible: false }
                low-priority-early-z14:
                    filter: { kind_tile_rank: { min: 7 }, $zoom: [14] }
                    draw:
                        icons:
                            #size: [[14, 11px], [15, 16px], [17, 18px], [18, 20px]]
                            #visible: false
                            text: { visible: false }
                stations-later:
                    filter: { $zoom: { min: 17 } }
                    draw:
                        icons:
                            text:
                                font:
                                    size: 12px
                                    fill: [0.0,0.0,0.0]
            tram-stop-early:
                filter: { kind: tram_stop, $zoom: { max: 15 } }
                draw:
                    icons:
                        visible: false
                        text:
                            visible: false
            tram-stop-early-z15:
                filter: { kind: tram_stop, $zoom: [15] }
                draw:
                    icons:
                        text:
                            visible: false
            tram-stop:
                filter: { kind: tram_stop, $zoom: { min: 15 } }
                draw:
                    icons:
                        size: [[16, 12px], [17, 18px]]
            bus-stop-bus-station-labels:
                filter:
                    kind: [bus_stop, bus_station]
                    $zoom: { min: 18 }
                draw:
                    icons:
                        text:
                            visible: global.text_visible_poi_landuse
                            font:
                                fill: global.text_fill
                                size: 11px
                                stroke: { color: global.text_stroke, width: 4 }

#
# HERE BEGINS CONTINUES "no label" version, commment it all out for no labels for POIS
#

                bus_stop:
                    filter:
                        kind: [bus_stop]
                        $zoom: { max: 19 }
                    draw:
                        icons:
                            size: [[13, 8px], [19, 18px]]
                            text:
                                visible: false
            minor-z17-early:
                filter:
                    kind: [accountant, administrative, advertising_agency, architect, association, atm, bakery, bed_and_breakfast, bicycle, bicycle_parking, bicycle_rental, books, bus_stop, bus_stop, butcher, car, car_repair, chalet, clothes, company, computer, consulting, convenience, doityourself, drinking_water, dry_cleaning, educational_institution, emergency_phone, employment_agency, estate_agent, fashion, financial, florist, foundation, gate, gift, government, greengrocer, guest_house, hairdresser, hostel, hotel, insurance, it, jewelry, lawyer, mast, memorial, mobile_phone, motel, newspaper, ngo, notary, optician, parking, pet, physician, playground, political_party, post_box, religion, research, slipway, subway_entrance, tax_advisor, telecommunication, telephone, theatre, therapist, toilets, traffic_signals, travel_agent, water_tower]
                    area: false
                    $zoom: { max: 17 }
                draw:
                    icons: { visible: false }
            minor-z18-early:
                filter:
                    kind: [bench, waste_basket]
                    area: false
                    $zoom: { max: 18 }
                draw:
                    icons: { visible: false }

            icons:
                building-icon:
                    filter: { kind: [building, auditorium, terminal, hangar, retirement_home, manor, recreation_center, apartments] }
                    draw:   { icons: { sprite: building } }
                    early:
                        filter:
                            any:
                                # show labels for smaller landuse areas at higher zooms
                                - { $zoom: [14], area: { max: 200000 } }
                                - { $zoom: [15], area: { max: 20000 } }
                                - { $zoom: [16], area: { max: 5000 } }
                                - { $zoom: [17], area: { max: 1000 } }
                        draw:
                            icons:
                                visible: false
                college:
                    filter: { kind: [university, college], area: false }
                    draw:   { icons: { sprite: college } }
                hardware-store:
                    filter: { kind: [hardware, hardware-store, doityourself, paint] }
                    draw:   { icons: { sprite: hardware-store } }
                hotel:
                    filter: { kind: [hotel, motel, hostel] }
                    draw:   { icons: { sprite: hotel } }
                landmark:
                    filter: { kind: [landmark, memorial, monument, wayside_shrine, beacon] }
                    draw:   { icons: { sprite: landmark } }
                tower:
                    filter: { kind: [tower], label_placement: false }
                    draw:   { icons: { sprite: landmark } }
                place_of_worship:
                    filter:
                        all:
                            - kind: [place_of_worship, wayside_chapel]
                    draw:
                        icons:
                            sprite: function() { return feature.religion; }
                            sprite_default: place_of_worship
#
# HERE ENDS CONTINUATION OF "no label" version, commment it all out for no labels for POIS
#


    # todo: ocean and sea features are hiding in the places layer
    water-area-labels:
        data: { source: mapzen, layer: [water] }
        visible: global.text_visible_water_labels
        filter:
            all:
                - name: true
                - $geometry: point
                - not: { kind: [riverbank, dock, playa] }
                - area: true
            any:
                # show labels for smaller landuse areas at higher zooms
                - { $zoom: { min: 5 },  area: { min: 10000000000 } }
                - { $zoom: { min: 6 },  area: { min: 5000000000 } }
                - { $zoom: { min: 7 },  area: { min: 400000000 } }
                - { $zoom: { min: 8 },  area: { min: 200000000 } }
                - { $zoom: { min: 9 },  area: { min: 100000000 } }
                - { $zoom: { min: 10 }, area: { min: 100000000 } }
                - { $zoom: { min: 11 }, area: { min: 10000000 } }
                - { $zoom: { min: 12 }, area: { min: 2000000 } }
                - { $zoom: { min: 13 }, area: { min: 1000000 } }
                - { $zoom: { min: 14 }, area: { min: 500000 } }
                - { $zoom: { min: 15 }, area: { min: 100000 } }
                - { $zoom: { min: 15 }, area: { min: 50000 } }
                - { $zoom: { min: 16 }, area: { min: 20000 } }
                - { $zoom: { min: 17 } }
        draw:
            text-blend-order:
                visible: global.text_visible_water_labels
                text_source: global.ux_language_text_source
                font:
                    fill: global.text_fill_water
                    family: global.text_font_family
                    style: italic
                    weight: 400
                    size: 12px
                    # stroke: { color: [0.878,0.929,0.980], width: 2 }
        lakes-z5:
            filter: { $zoom: [5] }
            draw:
                text-blend-order: { font: { size: 9px } }
        lakes-z6:
            filter: { $zoom: [6] }
            draw:
                text-blend-order: { font: { size: 11px } }
        lakes-z8:
            filter: { $zoom: [8] }
            draw:
                text-blend-order: { font: { size: 12px } }

        ocean-sea-labels:
            filter: { name: true, kind: [sea, ocean] }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    font:
                        fill: global.text_fill_water
                        family: global.text_font_family
                        weight: 400
                        size: 12px
                        transform: uppercase
            sea-early:
                filter: { $zoom: [3], kind: sea }
                draw: { text-blend-order: { visible: false } }
            ocean-spacer:
                filter: { kind: ocean }
                ocean-spacer-z1-z4:
                    filter: { $zoom: { min: 1, max: 4 } }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_ocean
                            text_wrap: false
                ocean-spacer-z4-up:
                    filter: { $zoom: { min: 4 } }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_ocean
                            text_wrap: false
            ocean-labels-z1:
                filter: { $zoom: [1] }
                draw:
                    text-blend-order: { font: { size: 8px } }
            ocean-labels-z2:
                filter: { $zoom: [2] }
                draw:
                    text-blend-order: { font: { size: 10px } }
            ocean-labels-z3:
                filter: { $zoom: [3] }
                draw:
                    text-blend-order: { font: { size: 13px } }
            ocean-labels-z4-up:
                filter: { $zoom: { min: 4} }
                draw:
                    text-blend-order: { font: { size: 16px } }

            sea-spacer:
                filter: { not: { kind: [ocean] }, $zoom: { min: 4 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_sea
                        text_wrap: false

            sea-labels:
                filter: { not: { kind: [ocean] } }
                sea-labels-z4:
                        filter: { $zoom: [4] }
                        draw:
                            text-blend-order: { font: { size: 8px, fill: [0.250,0.250,0.250] } }
                sea-labels-z5:
                        filter: { $zoom: [5] }
                        draw:
                            text-blend-order: { font: { size: 10px } }
                sea-labels-z6:
                        filter: { $zoom: [6] }
                        draw:
                            text-blend-order: { font: { size: 11px } }
                sea-labels-z7:
                        filter: { $zoom: [7] }
                        draw:
                            text-blend-order: { font: { size: 12px } }
                sea-labels-z8:
                        filter: { $zoom: { min: 8} }
                        draw:
                            text-blend-order: { font: { size: 14px } }

        playa-labels:
            visible: global.text_visible_water_labels
            filter:
                all:
                    - name: true
                    - $geometry: point
                    - kind: playa
                    - area: true
                any:
                    # show labels for smaller landuse areas at higher zooms
                    - { $zoom: { min: 7 },  area: { min: 1500000000 } }
                    - { $zoom: { min: 8 },  area: { min: 200000000 } }
                    - { $zoom: { min: 9 },  area: { min: 100000000 } }
                    - { $zoom: { min: 10 }, area: { min: 100000000 } }
                    - { $zoom: { min: 11 }, area: { min: 10000000 } }
                    - { $zoom: { min: 12 }, area: { min: 2000000 } }
                    - { $zoom: { min: 13 }, area: { min: 1000000 } }
                    - { $zoom: { min: 14 }, area: { min: 500000 } }
                    - { $zoom: { min: 15 }, area: { min: 100000 } }
                    - { $zoom: { min: 15 }, area: { min: 50000 } }
                    - { $zoom: { min: 16 }, area: { min: 20000 } }
                    - { $zoom: { min: 17 } }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    font:
                        fill: [0.50,0.50,0.50]
                        family: global.text_font_family
                        style: italic
                        weight: 400
                        size: 9px
                        stroke: { color: global.text_stroke_water, width: 3 }
            # debug only
    #        icons:
    #            size: [[13, 12px], [15, 18px]]
    #            interactive: true
    #            sprite: global.townspot_sprite

        water-line-labels:
            filter:
                all:
                    - name: true
                    - $geometry: line
                    - kind: [river,canal,stream,dam,ditch,drain]
                    - $zoom: { min: 14 }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    font:
                        fill: global.text_fill_water
                        family: global.text_font_family
                        style: italic
                        weight: 400
                        size: 12px
                        # stroke: { color: global.text_stroke_water, width: 3 }
            water-line-labels-z14:
                filter: { $zoom: [14] }
                draw:
                    text-blend-order: { font: { size: 10px } }
            water-line-labels-z17:
                filter: { $zoom: [17] }
                draw:
                    text-blend-order: { font: { size: 14px } }
            not-river-not-stream:
                filter: { kind: [canal,dam,ditch,drain], $zoom: { max: 16 } }
                draw:
                    text-blend-order:
                        visible: false
            stream:
                filter: { kind: [stream], $zoom: { max: 17 } }
                draw:
                    text-blend-order:
                        visible: false

    landuse:
        data: { source: mapzen }
        draw:
            park-dots1:
                order: global.feature_order
                visible: false
            medium-dots:
                order: global.feature_order
                visible: false
            horizontal-bars:
                order: global.feature_order
                visible: false
            horizontal-bars-rev:
                order: global.feature_order
                visible: false
            dots-rev:
                order: global.feature_order
                visible: false
            pixel-pattern-light:
                order: global.feature_order
                visible: false
            pixel-pattern-bright:
                order: global.feature_order
                visible: false
            pixel-pattern-dark:
                order: global.feature_order
                visible: false
            polygons:
                order: global.feature_order
        tier1:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 3 },  area: { min: 300000000 } }
            #         - { $zoom: { min: 4 },  area: { min: 300000000 } }
            #         - { $zoom: { min: 5 },  area: { min: 150000000 } }
            #         - { $zoom: { min: 6 },  area: { min: 150000000 } }
            #         - { $zoom: { min: 7 },  area: { min: 100000000 } }
            #         - { $zoom: { min: 8 },  area: { min: 10000000 } }
            #         - { $zoom: { min: 9 },  area: { min: 5000000 } }
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
            national_park:
                filter:
                    all:
                        - kind: [national_park, battlefield, protected_area]
                    any:
                        - not: { operator: [ "United States Forest Service" ] }
                        - protect_class: ['2','3','5']
                draw:
                    park-dots1:
                        interactive: true
                        color: [0.790,0.790,0.790]
                        # todo: what is this?
                        order: 18
                        visible: true
                us_national_park:
                    # yosemite national park, death valley national park, grand canyon national park
                    filter:
                        any:
                            - operator: [ "United States National Park Service" ]
                            - protect_class: ['2','3','5']
                    draw:
                        pixel-pattern-light:
                            visible: true

        tier2:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 4 },  area: { min: 1000000000 } }
            #         - { $zoom: { min: 5 },  area: { min: 1000000000 } }
            #         - { $zoom: { min: 6 },  area: { min: 150000000 } }
            #         - { $zoom: { min: 7 },  area: { min: 100000000 } }
            #         - { $zoom: { min: 8 },  area: { min: 10000000 } }
            #         - { $zoom: { min: 9 },  area: { min: 5000000 } }
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 250000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }

            # effectively wilderness
            conservation:
                filter:
                    $zoom: { min: 4 }
                    kind: [protected_area, nature_reserve, national_park]
                    not: { protect_class: [2,3,5]}
                draw:
                    # pixel-pattern-light:
                    #     #order: 33 #25
                    #     visible: true

                    pixel-pattern-light:
                        color: [1.0,1.0,1.0]
                        visible: true
                    outline:
                        style: lines
                        color: global.green6
                        width: [[9,0px],[10,2px],[12,4px]]

            national_forest_level_6:
                filter:
                    all:
                        - kind: forest
                    any:
                        - protect_class: ['6']
                        - operator: ['United States Forest Service']
                draw:
                    pixel-pattern-bright:
                        color: global.green7
                        visible: true

            parks-and-national-forests-not-national-park:
                filter:
                    all:
                        - $zoom: { min: 4 }
                        - kind: [park, national_park]
                    any:
                        - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                        - not: { protect_class: ['2','3','5','6'] }
                # default for national forests and more?
                draw:
                    park-dots1:
                        color: [0.760,0.760,0.760]
                        visible: true
                national_park:
                    #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                    filter:
                        all:
                            - kind: national_park
                            - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                    draw:
                        pixel-pattern-light:
                            visible: true

            # gotta be a protected area to draw green, not just a landcover type
            farm:
                filter:
                    kind: [farm, farmland]
                    $zoom: { min: 10}
                draw:
                    polygons:
                        color: [1.00,1.00,1.00]
                        visible: global.green4_v

            # TODO, make a ligher forest pattern color
            #forest:
            #    filter: { kind: [forest, wood, natural_wood, natural_forest, natural_park], $zoom: { min: 10 }, not: { operator: [ "United States Forest Service"] } }
            #    draw:
            #        pixel-pattern-bright:
            #            #color: [0.890,0.890,0.890]
            #            visible: true

        tier3:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 8 },  area: { min: 10000000 } }
            #         - { $zoom: { min: 9 },  area: { min: 5000000 } }
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
            airport:
                filter:
                    kind: aerodrome
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: global.purple_v
            military:
                filter:
                    kind: military
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            university:
                filter:
                    kind: [university, college]
                draw:
                    dots-rev:
                        color: [0.945,0.945,0.945]
                        visible: true
        tier4:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
            cemetery:
                filter:
                    kind: cemetery
                draw:
                    tiny-dots:
                        color: [0.890,0.890,0.890]
                        visible: true
            # commercial:
            #     filter:
            #         kind: commercial
            #     draw:
            #         dots:
            #             color: [0.855,0.748,0.667]
            #             visible: global.grey1_v
            golf_course:
                filter:
                    kind: golf_course
                draw:
                    medium-dots:
                        color: [0.830,0.830,0.830]
                        visible: true
            hospital:
                filter:
                    kind: hospital
                draw:
                    medium-dots:
                        color: [0.890,0.890,0.890]
                        visible: true
            industrial:
                filter:
                    kind: industrial
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            power:
                filter: { kind: [plant, generator, substation] }
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            railway:
                filter:
                    kind: railway
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            sports_centre:
                filter:
                    kind: sports_centre
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
            recreation_ground:
                filter:
                    kind: recreation_ground
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            retail:
                filter:
                    kind: retail
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: global.grey1_v
            stadium:
                filter:
                    kind: stadium
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            zoo:
                filter:
                    kind: [zoo, wildlife_park]
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            winter_sports:
                filter:
                    kind: winter_sports
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: global.grey8_v
            man-made:
                filter: { kind: [pier,wastewater_plant,works,bridge,tower,breakwater,water_works,groyne,dike,cutline] }
                draw:
                    horizontal-bars:
                        color: [0.90,0.90,0.90]
                        visible: true
                pier:
                    filter: { kind: [pier,bridge,breakwater,groyne,dike,cutline] }
                    draw:
                        polygons:
                            color: [0.970,0.970,0.970]
                            visible: true
        tier5:
            filter:
                # any:
                #     # limit show smaller landuse areas to higher zooms
                #     - { $zoom: { min: 10 }, area: { min: 1000000 } }
                #     - { $zoom: { min: 11 }, area: { min: 400000 } }
                #     - { $zoom: { min: 12 }, area: { min: 200000 } }
                #     - { $zoom: { min: 13 }, area: { min: 50000 } }
                #     - { $zoom: { min: 14 }, area: { min: 20000 } }
                #     - { $zoom: { min: 15 }, area: { min: 10000 } }
                #     - { $zoom: { min: 15 }, area: { min: 2000 } }
                #     - { $zoom: { min: 16 } }
                all:
                    - kind:
                        - theme_park
                        - resort
                        - aquarium
                        - winery
                        - maze
                        - beach
            tourism-related:
                filter:
                    kind:
                        - theme_park
                        - resort
                        - aquarium
                        - winery
                        - maze
                draw:
                    dots:
                        color: global.grey10
                        visible: true
            beach:
                filter:
                    kind: beach
                draw:
                    dots:
                        color: [0.780,0.740,0.538]
                        visible: true
        tier6:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
            garden:
                filter:
                    kind: garden
                draw:
                    tiny-dots:
                        color: [0.760,0.760,0.760]
                        visible: true
            parking:
                filter:
                    all:
                        - kind: parking
                        - $zoom: { min: 14 }
                    any:
                        - { $zoom: { min: 14 }, area: { min: 10000 } }
                        - { $zoom: { min: 15 }, area: { min: 5000 } }
                draw:
                    horizontal-bars-rev:
                        color: [0.950,0.950,0.950]
                        visible: global.grey1_v
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        horizontal-bars-rev:
                            color: [0.950,0.950,0.950]
                            visible: true
            pedestrian:
                filter:
                    kind: [pedestrian,common]
                draw:
                    park-dots1:
                        color: [0.950,0.950,0.950]
                        visible: global.grey1_v
                green-stuff:
                    filter:
                        surface: [grass]
                    draw:
                        dots:
                            color: [0.8,0.8,0.8]
            pitch:
                filter: { kind: pitch }
                draw:
                    tiny-dots:
                        color: [0.90,0.90,0.90]
                        visible: true
                    outline:
                        style: lines
                        color: global.green6
                        width: [[14,0px],[15,1px],[16,1m]]
            place_of_worship:
                filter:
                    kind: place_of_worship
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: global.grey1_v
            playground:
                filter:
                    kind: playground
                draw:
                    dots-rev:
                        color: [1.0,1.0,1.0]
                        visible: true
            school:
                filter:
                    kind: school
                draw:
                    dots-rev:
                        color: [0.945,0.945,0.945]
                        visible: true
            minor-landuse:
                filter:
                    kind:
                        - attraction
                        - artwork
                        - wilderness_hut
                        - hanami
                draw:
                    dots:
                        color: [0.765,0.765,0.765]
                        visible: true

    landuse-not-filtered:
        data: { source: mapzen, layer: landuse }
        # runways and taxiways are also in the roads layer as lines
        # these ones are probably duplicate features, but have AREA (a good thing)
        filter:
            kind:
                - runway
                - apron
                - beach
                - roller_coaster
                - amusement_ride
                - summer_toboggan
                - trail_riding_station
                - water_slide
                - carousel
                - animal
                - enclosure
                - petting_zoo
                - aviary
        draw:
            dots:
                order: global.feature_order
                visible: false
            dots-rev:
                order: global.feature_order
                visible: false
            polygons:
                visible: false
                order: global.feature_order
        runway:
            filter:
                kind: runway
            draw:
                polygons:
                    visible: true
                    color: black
        apron:
            filter:
                kind: apron
                $zoom: { min: 15}
            draw:
                polygons:
                    color: [1.000, 1.000, 1.000]
                    visible: global.grey1_v
        minor-amusement-park-landuse:
            filter:
                kind:
                    - roller_coaster
                    - amusement_ride
                    - summer_toboggan
                    - trail_riding_station
                    - water_slide
                    - carousel
            draw:
                dots:
                    color: global.grey12
                    visible: true
        minor-zoo-landuse:
            filter:
                kind:
                    - animal
                    - enclosure
                    - petting_zoo
                    - aviary
            draw:
                dots:
                    color: global.green11
                    visible: true

    # landuse_urban_area-early:
    #     data: { source: mapzen, layer: landuse }
    #     filter:
    #         # This is from Natural Earth and only shows up from zoom(0,9)
    #         kind: ['urban area']
    #     draw:
    #         dots:
    #             order: 1
    #             color: [[4, [1.000,0.510,0.894]], [6, [1.000,0.510,0.894]], [7, [0.882,0.639,0.827]], [8, [0.757,0.729,0.753]]]

    debug:
        data: { source: mapzen }
        draw:
            flat_lines:
                width: 2px
                order: 1000
                color: '#ff0000'
